{"version":3,"file":"index.cjs","sources":["../src/eslint/buildIn/rules/possibleProblems.ts","../src/eslint/buildIn/rules/suggestions.ts","../src/eslint/buildIn/rules/layoutFormatting.ts","../src/eslint/buildIn/rules/index.ts","../src/eslint/buildIn/index.ts","../src/eslint/ts/rules/base.ts","../src/eslint/ts/rules/stylistic.ts","../src/eslint/ts/rules/recommended.ts","../src/eslint/ts/rules/strict.ts","../src/util/ruleTools.ts","../src/eslint/ts/rules/index.ts","../src/eslint/ts/index.ts","../src/eslint/stylistic/rules.ts","../src/eslint/stylistic/index.ts","../src/eslint/json/rules/jsonc.ts","../src/eslint/json/rules/extension.ts","../src/eslint/json/rules/index.ts","../src/eslint/json/index.ts","../src/eslint/index.ts","../src/stylelint/buildIn/rules/avoidErrors.ts","../src/stylelint/buildIn/rules/enforceConventions.ts","../src/stylelint/buildIn/rules/index.ts","../src/stylelint/buildIn/index.ts","../src/stylelint/order/index.ts","../src/stylelint/prettier/index.ts","../src/stylelint/index.ts","../src/index.ts"],"sourcesContent":["export default {\n  // Enforce return statements in callbacks of array methods\n  // https://eslint.org/docs/latest/rules/array-callback-return\n  'array-callback-return': [\n    'error',\n    { allowImplicit: false, checkForEach: false },\n  ],\n\n  // verify super() callings in constructors\n  // https://eslint.org/docs/latest/rules/constructor-super\n  'constructor-super': 'error',\n\n  // Enforce “for” loop update clause moving the counter in the right direction\n  // https://eslint.org/docs/rules/for-direction\n  'for-direction': 'error',\n\n  // Enforces that a return statement is present in property getters\n  // https://eslint.org/docs/rules/getter-return\n  'getter-return': ['error', { allowImplicit: true }],\n\n  // disallow using an async function as a Promise executor\n  // https://eslint.org/docs/rules/no-async-promise-executor\n  'no-async-promise-executor': 'error',\n\n  // Disallow await inside of loops\n  // https://eslint.org/docs/rules/no-await-in-loop\n  'no-await-in-loop': 'error',\n\n  // disallow modifying variables of class declarations\n  // https://eslint.org/docs/rules/no-class-assign\n  'no-class-assign': 'error',\n\n  // Disallow comparisons to negative zero\n  // https://eslint.org/docs/rules/no-compare-neg-zero\n  'no-compare-neg-zero': 'error',\n\n  // disallow assignment in conditional expressions\n  // https://eslint.org/docs/latest/rules/no-cond-assign\n  'no-cond-assign': ['error', 'always'],\n\n  // disallow modifying variables that are declared using const\n  // https://eslint.org/docs/latest/rules/no-const-assign\n  'no-const-assign': 'error',\n\n  // Disallow expressions where the operation doesn't affect the value\n  // https://eslint.org/docs/latest/rules/no-constant-binary-expression\n  'no-constant-binary-expression': 'error',\n\n  // disallow use of constant expressions in conditions\n  // https://eslint.org/docs/latest/rules/no-constant-condition\n  'no-constant-condition': ['error', { checkLoops: false }],\n\n  // Disallow returning value in constructor\n  // https://eslint.org/docs/rules/no-constructor-return\n  'no-constructor-return': 'error',\n\n  // disallow control characters in regular expressions\n  // https://eslint.org/docs/latest/rules/no-control-regex\n  'no-control-regex': 'error',\n\n  // disallow use of debugger\n  // https://eslint.org/docs/latest/rules/no-debugger\n  'no-debugger': 'error',\n\n  // disallow duplicate arguments in functions\n  // https://eslint.org/docs/latest/rules/no-dupe-args\n  'no-dupe-args': 'error',\n\n  // disallow duplicate class members\n  // https://eslint.org/docs/rules/no-dupe-class-members\n  'no-dupe-class-members': 'error',\n\n  // Disallow duplicate conditions in if-else-if chains\n  // https://eslint.org/docs/rules/no-dupe-else-if\n  'no-dupe-else-if': 'error',\n\n  // disallow duplicate keys when creating object literals\n  // https://eslint.org/docs/latest/rules/no-dupe-keys\n  'no-dupe-keys': 'error',\n\n  // disallow a duplicate case label.\n  // https://eslint.org/docs/latest/rules/no-duplicate-case\n  'no-duplicate-case': 'error',\n\n  // disallow importing from the same path more than once\n  // https://eslint.org/docs/rules/no-duplicate-imports\n  'no-duplicate-imports': 'error',\n\n  // disallow the use of empty character classes in regular expressions\n  // https://eslint.org/docs/latest/rules/no-empty-character-class\n  'no-empty-character-class': 'error',\n\n  // disallow empty destructuring patterns\n  // https://eslint.org/docs/rules/no-empty-pattern\n  'no-empty-pattern': 'error',\n\n  // disallow assigning to the exception in a catch block\n  // https://eslint.org/docs/latest/rules/no-ex-assign\n  'no-ex-assign': 'error',\n\n  // disallow fallthrough of case statements\n  // https://eslint.org/docs/rules/no-fallthrough\n  'no-fallthrough': 'error',\n\n  // disallow overwriting functions written as function declarations\n  // https://eslint.org/docs/latest/rules/no-func-assign\n  'no-func-assign': 'error',\n\n  // Disallow assigning to imported bindings\n  // https://eslint.org/docs/rules/no-import-assign\n  'no-import-assign': 'error',\n\n  // disallow function or variable declarations in nested blocks\n  // https://eslint.org/docs/latest/rules/no-inner-declarations\n  'no-inner-declarations': 'error',\n\n  // disallow invalid regular expression strings in the RegExp constructor\n  // https://eslint.org/docs/latest/rules/no-invalid-regexp\n  'no-invalid-regexp': 'error',\n\n  // disallow irregular whitespace outside of strings and comments\n  // https://eslint.org/docs/latest/rules/no-irregular-whitespace\n  'no-irregular-whitespace': 'error',\n\n  // Disallow Number Literals That Lose Precision\n  // https://eslint.org/docs/rules/no-loss-of-precision\n  'no-loss-of-precision': 'error',\n\n  // Disallow characters which are made with multiple code points in character class syntax\n  // https://eslint.org/docs/rules/no-misleading-character-class\n  'no-misleading-character-class': 'error',\n\n  // Disallow new operators with global non-constructor functions\n  // https://eslint.org/docs/latest/rules/no-new-native-nonconstructor\n  'no-new-native-nonconstructor': 'error',\n\n  // disallow symbol constructor\n  // https://eslint.org/docs/rules/no-new-symbol\n  'no-new-symbol': 'error',\n\n  // disallow the use of object properties of the global object (Math and JSON) as functions\n  // https://eslint.org/docs/latest/rules/no-obj-calls\n  'no-obj-calls': 'error',\n\n  // Disallow returning values from Promise executor functions\n  // https://eslint.org/docs/rules/no-promise-executor-return\n  'no-promise-executor-return': 'error',\n\n  // disallow use of Object.prototypes builtins directly\n  // https://eslint.org/docs/rules/no-prototype-builtins\n  'no-prototype-builtins': 'error',\n\n  // disallow self assignment\n  // https://eslint.org/docs/rules/no-self-assign\n  'no-self-assign': [\n    'error',\n    {\n      props: true,\n    },\n  ],\n\n  // disallow comparisons where both sides are exactly the same\n  // https://eslint.org/docs/rules/no-self-compare\n  'no-self-compare': 'error',\n\n  // Disallow returning values from setters\n  // https://eslint.org/docs/rules/no-setter-return\n  'no-setter-return': 'error',\n\n  // disallow sparse arrays\n  // https://eslint.org/docs/latest/rules/no-sparse-arrays\n  'no-sparse-arrays': 'error',\n\n  // Disallow template literal placeholder syntax in regular strings\n  // https://eslint.org/docs/rules/no-template-curly-in-string\n  'no-template-curly-in-string': 'error',\n\n  // disallow to use this/super before super() calling in constructors.\n  // https://eslint.org/docs/rules/no-this-before-super\n  'no-this-before-super': 'error',\n\n  // disallow use of undeclared variables unless mentioned in a /*global */ block\n  // https://eslint.org/docs/latest/rules/no-undef\n  'no-undef': ['error', { typeof: true }],\n\n  // Avoid code that looks like two expressions but is actually one\n  // https://eslint.org/docs/rules/no-unexpected-multiline\n  'no-unexpected-multiline': 'error',\n\n  // disallow unmodified conditions of loops\n  // https://eslint.org/docs/rules/no-unmodified-loop-condition\n  'no-unmodified-loop-condition': 'off',\n\n  // disallow unreachable statements after a return, throw, continue, or break statement\n  // https://eslint.org/docs/latest/rules/no-unreachable\n  'no-unreachable': 'error',\n\n  // Disallow loops with a body that allows only one iteration\n  // https://eslint.org/docs/rules/no-unreachable-loop\n  'no-unreachable-loop': [\n    'error',\n    {\n      ignore: [], // WhileStatement, DoWhileStatement, ForStatement, ForInStatement, ForOfStatement\n    },\n  ],\n\n  // disallow return/throw/break/continue inside finally blocks\n  // https://eslint.org/docs/rules/no-unsafe-finally\n  'no-unsafe-finally': 'error',\n\n  // disallow negating the left operand of relational operators\n  // https://eslint.org/docs/rules/no-unsafe-negation\n  'no-unsafe-negation': 'error',\n\n  // disallow use of optional chaining in contexts where the undefined value is not allowed\n  // https://eslint.org/docs/rules/no-unsafe-optional-chaining\n  'no-unsafe-optional-chaining': [\n    'error',\n    { disallowArithmeticOperators: true },\n  ],\n\n  // Disallow Unused Private Class Members\n  // https://eslint.org/docs/rules/no-unused-private-class-members\n  'no-unused-private-class-members': 'error',\n\n  // disallow declaration of variables that are not used in the code\n  // https://eslint.org/docs/latest/rules/no-unused-vars\n  'no-unused-vars': [\n    'error',\n    {\n      vars:                           'all',\n      varsIgnorePattern:              '^_',\n      args:                           'after-used',\n      caughtErrors:                   'all',\n      caughtErrorsIgnorePattern:      '^_',\n      destructuredArrayIgnorePattern: '^_',\n      ignoreRestSiblings:             true,\n    },\n  ],\n\n  // disallow use of variables before they are defined\n  // https://eslint.org/docs/latest/rules/no-use-before-define\n  'no-use-before-define': [\n    'error',\n    {\n      functions:         true,\n      classes:           true,\n      variables:         true,\n      allowNamedExports: false,\n    },\n  ],\n\n  // Disallow useless backreferences in regular expressions\n  // https://eslint.org/docs/rules/no-useless-backreference\n  'no-useless-backreference': 'error',\n\n  // Disallow assignments that can lead to race conditions due to usage of await or yield\n  // https://eslint.org/docs/rules/require-atomic-updates\n  // note: not enabled because it is very buggy\n  'require-atomic-updates': 'off',\n\n  // disallow comparisons with the value NaN\n  // https://eslint.org/docs/latest/rules/use-isnan\n  'use-isnan': 'error',\n\n  // ensure that the results of typeof are compared against a valid string\n  // https://eslint.org/docs/rules/valid-typeof\n  'valid-typeof': ['error', { requireStringLiterals: true }],\n};\n","import confusingBrowserGlobals from 'confusing-browser-globals';\n\nexport default {\n  // enforces getter/setter pairs in objects\n  // https://eslint.org/docs/rules/accessor-pairs\n  'accessor-pairs': 'off',\n\n  // enforces no braces where they can be omitted\n  // https://eslint.org/docs/rules/arrow-body-style\n  'arrow-body-style': [\n    'error',\n    'as-needed',\n    {\n      requireReturnForObjectLiteral: true,\n    },\n  ],\n\n  // treat var statements as if they were block scoped\n  // https://eslint.org/docs/rules/block-scoped-var\n  'block-scoped-var': 'error',\n\n  // require camel case names\n  // https://eslint.org/docs/latest/rules/camelcase\n  camelcase: [\n    'error',\n    {\n      properties:          'always',\n      ignoreDestructuring: false,\n      ignoreImports:       false,\n      ignoreGlobals:       false,\n    },\n  ],\n\n  // enforce or disallow capitalization of the first letter of a comment\n  // https://eslint.org/docs/rules/capitalized-comments\n  'capitalized-comments': ['off'],\n\n  // enforce that class methods use \"this\"\n  // https://eslint.org/docs/rules/class-methods-use-this\n  'class-methods-use-this': [\n    'error',\n    {\n      exceptMethods:         [],\n      enforceForClassFields: true,\n    },\n  ],\n\n  // specify the maximum cyclomatic complexity allowed in a program\n  // https://eslint.org/docs/rules/complexity\n  complexity: ['error', 20],\n\n  // require return statements to either always or never specify values\n  // https://eslint.org/docs/rules/consistent-return\n  'consistent-return': ['error', { treatUndefinedAsUnspecified: false }],\n\n  // enforces consistent naming when capturing the current execution context\n  // https://eslint.org/docs/latest/rules/consistent-this\n  'consistent-this': 'off',\n\n  // specify curly brace conventions for all control statements\n  // https://eslint.org/docs/rules/curly\n  curly: ['error', 'multi-line', 'consistent'], // multiline\n\n  // require default case in switch statements\n  // https://eslint.org/docs/rules/default-case\n  'default-case': ['error', { commentPattern: '^no default$' }],\n\n  // Enforce default clauses in switch statements to be last\n  // https://eslint.org/docs/rules/default-case-last\n  'default-case-last': 'error',\n\n  // Enforce default parameters to be last\n  // https://eslint.org/docs/rules/default-param-last\n  'default-param-last': 'error',\n\n  // encourages use of dot notation whenever possible\n  // https://eslint.org/docs/rules/dot-notation\n  'dot-notation': ['error', { allowKeywords: true }],\n\n  // require the use of === and !==\n  // https://eslint.org/docs/rules/eqeqeq\n  eqeqeq: ['error', 'always', { null: 'ignore' }],\n\n  // requires function names to match the name of the variable or property to which they are\n  // assigned\n  // https://eslint.org/docs/rules/func-name-matching\n  'func-name-matching': ['off'],\n\n  // require function expressions to have a name\n  // https://eslint.org/docs/rules/func-names\n  'func-names': ['error', 'as-needed'],\n\n  // enforces use of function declarations or expressions\n  // https://eslint.org/docs/rules/func-style\n  'func-style': ['error', 'declaration', { allowArrowFunctions: true }],\n\n  // Require grouped accessor pairs in object literals and classes\n  // https://eslint.org/docs/rules/grouped-accessor-pairs\n  'grouped-accessor-pairs': ['error', 'getBeforeSet'],\n\n  // make sure for-in loops have an if statement\n  // https://eslint.org/docs/rules/guard-for-in\n  'guard-for-in': 'error',\n\n  // disallow specified identifiers\n  // https://eslint.org/docs/rules/id-denylist\n  'id-denylist': 'off',\n\n  // this option enforces minimum and maximum identifier lengths\n  // https://eslint.org/docs/latest/rules/id-length\n  'id-length': 'off',\n\n  // require identifiers to match the provided regular expression\n  // https://eslint.org/docs/latest/rules/id-match\n  'id-match': ['off'],\n\n  // enforce or disallow variable initializations at definition\n  // https://eslint.org/docs/latest/rules/init-declarations\n  'init-declarations': 'off',\n\n  // Require or disallow logical assignment operator shorthand\n  // https://eslint.org/docs/latest/rules/logical-assignment-operators\n  'logical-assignment-operators': [\n    'error',\n    'always',\n    { enforceForIfStatements: true },\n  ],\n\n  // enforce a maximum number of classes per file\n  // https://eslint.org/docs/rules/max-classes-per-file\n  'max-classes-per-file': ['error', 1],\n\n  // specify the maximum depth that blocks can be nested\n  // https://eslint.org/docs/latest/rules/max-depth\n  'max-depth': ['off'],\n\n  // specify the max number of lines in a file\n  // https://eslint.org/docs/rules/max-lines\n  'max-lines': ['off'],\n\n  // enforce a maximum function length\n  // https://eslint.org/docs/rules/max-lines-per-function\n  'max-lines-per-function': ['off'],\n\n  // specify the maximum depth callbacks can be nested\n  // https://eslint.org/docs/latest/rules/max-nested-callbacks\n  'max-nested-callbacks': 'off',\n\n  // limits the number of parameters that can be used in the function declaration.\n  // https://eslint.org/docs/latest/rules/max-params\n  'max-params': ['error', 3],\n\n  // specify the maximum number of statement allowed in a function\n  // https://eslint.org/docs/latest/rules/max-statements\n  'max-statements': ['off'],\n\n  // enforce a particular style for multiline comments\n  // https://eslint.org/docs/rules/multiline-comment-style\n  'multiline-comment-style': ['off'],\n\n  // require a capital letter for constructors\n  // https://eslint.org/docs/latest/rules/new-cap\n  'new-cap': ['off'],\n\n  // disallow the use of alert, confirm, and prompt\n  // https://eslint.org/docs/rules/no-alert\n  'no-alert': 'error',\n\n  // disallow use of the Array constructor\n  // https://eslint.org/docs/latest/rules/no-array-constructor\n  'no-array-constructor': 'error',\n\n  // disallow use of bitwise operators\n  // https://eslint.org/docs/rules/no-bitwise\n  'no-bitwise': 'error',\n\n  // disallow use of arguments.caller or arguments.callee\n  // https://eslint.org/docs/rules/no-caller\n  'no-caller': 'error',\n\n  // disallow lexical declarations in case/default clauses\n  // https://eslint.org/docs/rules/no-case-declarations\n  'no-case-declarations': 'error',\n\n  // disallow use of console\n  // https://eslint.org/docs/latest/rules/no-console\n  'no-console': 'error',\n\n  // disallow use of the continue statement\n  // https://eslint.org/docs/rules/no-continue\n  'no-continue': 'error',\n\n  // disallow deletion of variables\n  // https://eslint.org/docs/latest/rules/no-delete-var\n  'no-delete-var': 'error',\n\n  // disallow division operators explicitly at beginning of regular expression\n  // https://eslint.org/docs/rules/no-div-regex\n  'no-div-regex': 'off',\n\n  // disallow else after a return in an if\n  // https://eslint.org/docs/rules/no-else-return\n  'no-else-return': ['error', { allowElseIf: false }],\n\n  // disallow empty statements\n  // https://eslint.org/docs/rules/no-else-return\n  'no-empty': ['error', { allowEmptyCatch: false }],\n\n  // disallow empty functions, except for standalone funcs/arrows\n  // https://eslint.org/docs/rules/no-empty-function\n  'no-empty-function': [\n    'error',\n    {\n      allow: [\n        'functions',\n        'arrowFunctions',\n        'asyncFunctions',\n        'generatorFunctions',\n        'methods',\n        'asyncMethods',\n        'generatorMethods',\n      ],\n    },\n  ],\n\n  // Disallow empty static blocks\n  // https://eslint.org/docs/latest/rules/no-empty-static-block\n  'no-empty-static-block': 'error',\n\n  // disallow comparisons to null without a type-checking operator\n  // https://eslint.org/docs/rules/no-eq-null\n  'no-eq-null': 'off',\n\n  // disallow use of eval()\n  // https://eslint.org/docs/rules/no-eval\n  'no-eval': 'error',\n\n  // disallow adding to native types\n  // https://eslint.org/docs/rules/no-extend-native\n  'no-extend-native': 'error',\n\n  // disallow unnecessary function binding\n  // https://eslint.org/docs/rules/no-extra-bind\n  'no-extra-bind': 'error',\n\n  // disallow double-negation boolean casts in a boolean context\n  // https://eslint.org/docs/rules/no-extra-boolean-cast\n  'no-extra-boolean-cast': ['error', { enforceForLogicalOperands: true }],\n\n  // disallow Unnecessary Labels\n  // https://eslint.org/docs/rules/no-extra-label\n  'no-extra-label': 'error',\n\n  // disallow reassignments of native objects or read-only globals\n  // https://eslint.org/docs/rules/no-global-assign\n  'no-global-assign': ['error', { exceptions: [] }],\n\n  // disallow implicit type conversions\n  // https://eslint.org/docs/rules/no-implicit-coercion\n  'no-implicit-coercion': ['error', { disallowTemplateShorthand: true }],\n\n  // disallow var and named functions in global scope\n  // https://eslint.org/docs/rules/no-implicit-globals\n  'no-implicit-globals': 'off',\n\n  // disallow use of eval()-like methods\n  // https://eslint.org/docs/rules/no-implied-eval\n  'no-implied-eval': 'error',\n\n  // disallow comments inline after code\n  // https://eslint.org/docs/latest/rules/no-inline-comments\n  'no-inline-comments': 'off',\n\n  // disallow this keywords outside of classes or class-like objects\n  // https://eslint.org/docs/rules/no-invalid-this\n  'no-invalid-this': 'off',\n\n  // disallow usage of __iterator__ property\n  // https://eslint.org/docs/rules/no-iterator\n  'no-iterator': 'error',\n\n  // disallow labels that share a name with a variable\n  // https://eslint.org/docs/rules/no-label-var\n  'no-label-var': 'error',\n\n  // disallow use of labels for anything other than loops and switches\n  // https://eslint.org/docs/rules/no-labels\n  'no-labels': ['error', { allowLoop: false, allowSwitch: false }],\n\n  // disallow unnecessary nested blocks\n  // https://eslint.org/docs/rules/no-lone-blocks\n  'no-lone-blocks': 'error',\n\n  // disallow if as the only statement in an else block\n  // https://eslint.org/docs/rules/no-lonely-if\n  'no-lonely-if': 'error',\n\n  // disallow creation of functions within loops\n  // https://eslint.org/docs/rules/no-loop-func\n  'no-loop-func': 'error',\n\n  // disallow magic numbers\n  // https://eslint.org/docs/rules/no-magic-numbers\n  'no-magic-numbers': ['off'],\n\n  // disallow use of chained assignment expressions\n  // https://eslint.org/docs/rules/no-multi-assign\n  'no-multi-assign': ['error'],\n\n  // disallow use of multiline strings\n  // https://eslint.org/docs/rules/no-multi-str\n  'no-multi-str': 'error',\n\n  // disallow negated conditions\n  // https://eslint.org/docs/rules/no-negated-condition\n  'no-negated-condition': 'off',\n\n  // disallow nested ternary expressions\n  // https://eslint.org/docs/latest/rules/no-nested-ternary\n  'no-nested-ternary': 'error',\n\n  // disallow use of new operator when not part of the assignment or comparison\n  // https://eslint.org/docs/rules/no-new\n  'no-new': 'error',\n\n  // disallow use of new operator for Function object\n  // https://eslint.org/docs/rules/no-new-func\n  'no-new-func': 'error',\n\n  // disallows creating new instances of String, Number, and Boolean\n  // https://eslint.org/docs/rules/no-new-wrappers\n  'no-new-wrappers': 'error',\n\n  // Disallow \\8 and \\9 escape sequences in string literals\n  // https://eslint.org/docs/rules/no-nonoctal-decimal-escape\n  'no-nonoctal-decimal-escape': 'error',\n\n  // Disallow calls to the Object constructor without an argument\n  // https://eslint.org/docs/latest/rules/no-object-constructor\n  'no-object-constructor': 'off',\n\n  // disallow use of (old style) octal literals\n  // https://eslint.org/docs/rules/no-octal\n  'no-octal': 'error',\n\n  // disallow use of octal escape sequences in string literals, such as\n  // https://eslint.org/docs/rules/no-octal-escape\n  'no-octal-escape': 'error',\n\n  // disallow reassignment of function parameters\n  // disallow parameter object manipulation except for specific exclusions\n  // rule: https://eslint.org/docs/rules/no-param-reassign.html\n  'no-param-reassign': [\n    'error',\n    {\n      props:                          true,\n      ignorePropertyModificationsFor: [\n        'acc', // for reduce accumulators\n        'accumulator', // for reduce accumulators\n        'e', // for e.return value\n        'ctx', // for Koa routing\n        'context', // for Koa routing\n        'req', // for Express requests\n        'request', // for Express requests\n        'res', // for Express responses\n        'response', // for Express responses\n        '$scope', // for Angular 1 scopes\n        'staticContext', // for ReactRouter context\n      ],\n    },\n  ],\n\n  // disallow use of unary operators, ++ and --\n  // https://eslint.org/docs/rules/no-plusplusÍ\n  'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],\n\n  // disallow usage of __proto__ property\n  // https://eslint.org/docs/rules/no-proto\n  'no-proto': 'error',\n\n  // disallow declaring the same variable more than once\n  // https://eslint.org/docs/rules/no-redeclare\n  'no-redeclare': 'error',\n\n  // disallow multiple spaces in a regular expression literal\n  // https://eslint.org/docs/latest/rules/no-regex-spaces\n  'no-regex-spaces': 'error',\n\n  // Disallow specified names in exports\n  // https://eslint.org/docs/rules/no-restricted-exports\n  'no-restricted-exports': [\n    'error',\n    {\n      restrictedNamedExports: [\n        'default', // use `export default` to provide a default export\n        'then', // this will cause tons of confusion when your module is dynamically `import()`ed, and will break in most node ESM versions\n      ],\n    },\n  ],\n\n  // disallow specific globals\n  // https://eslint.org/docs/latest/rules/no-restricted-globals\n  'no-restricted-globals': [\n    'error',\n    {\n      name: 'isFinite',\n      message:\n        'Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite',\n    },\n    {\n      name: 'isNaN',\n      message:\n        'Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan',\n    },\n  ].concat(confusingBrowserGlobals),\n\n  // disallow specific imports\n  // https://eslint.org/docs/rules/no-restricted-imports\n  'no-restricted-imports': [\n    'off',\n    {\n      paths:    [],\n      patterns: [],\n    },\n  ],\n\n  // disallow certain object properties\n  // https://eslint.org/docs/rules/no-restricted-properties\n  'no-restricted-properties': [\n    'error',\n    {\n      object:   'arguments',\n      property: 'callee',\n      message:  'arguments.callee is deprecated',\n    },\n    {\n      object:   'global',\n      property: 'isFinite',\n      message:  'Please use Number.isFinite instead',\n    },\n    {\n      object:   'self',\n      property: 'isFinite',\n      message:  'Please use Number.isFinite instead',\n    },\n    {\n      object:   'window',\n      property: 'isFinite',\n      message:  'Please use Number.isFinite instead',\n    },\n    {\n      object:   'global',\n      property: 'isNaN',\n      message:  'Please use Number.isNaN instead',\n    },\n    {\n      object:   'self',\n      property: 'isNaN',\n      message:  'Please use Number.isNaN instead',\n    },\n    {\n      object:   'window',\n      property: 'isNaN',\n      message:  'Please use Number.isNaN instead',\n    },\n    {\n      property: '__defineGetter__',\n      message:  'Please use Object.defineProperty instead.',\n    },\n    {\n      property: '__defineSetter__',\n      message:  'Please use Object.defineProperty instead.',\n    },\n    {\n      object:   'Math',\n      property: 'pow',\n      message:  'Use the exponentiation operator (**) instead.',\n    },\n  ],\n\n  // disallow certain syntax forms\n  // https://eslint.org/docs/rules/no-restricted-syntax\n  'no-restricted-syntax': [\n    'error',\n    {\n      selector: 'ForInStatement',\n      message:\n        'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',\n    },\n    {\n      selector: 'ForOfStatement',\n      message:\n        'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',\n    },\n    {\n      selector: 'LabeledStatement',\n      message:\n        'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',\n    },\n    {\n      selector: 'WithStatement',\n      message:\n        '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',\n    },\n  ],\n\n  // disallow use of assignment in return statement\n  // https://eslint.org/docs/rules/no-return-assign\n  'no-return-assign': ['error', 'always'],\n\n  // disallow use of `javascript:` urls.\n  // https://eslint.org/docs/rules/no-script-url\n  'no-script-url': 'error',\n\n  // disallow use of comma operator\n  // https://eslint.org/docs/rules/no-sequences\n  'no-sequences': 'error',\n\n  // disallow declaration of variables already declared in the outer scope\n  // https://eslint.org/docs/latest/rules/no-shadow\n  'no-shadow': 'off',\n\n  // disallow shadowing of names such as arguments\n  // https://eslint.org/docs/latest/rules/no-shadow-restricted-names\n  'no-shadow-restricted-names': 'error',\n\n  // disallow the use of ternary operators\n  // https://eslint.org/docs/latest/rules/no-ternary\n  'no-ternary': 'off',\n\n  // restrict what can be thrown as an exception\n  // https://eslint.org/docs/rules/no-throw-literal\n  'no-throw-literal': 'error',\n\n  // disallow use of undefined when initializing variables\n  // https://eslint.org/docs/latest/rules/no-undef-init\n  'no-undef-init': 'error',\n\n  // disallow use of undefined variable\n  // https://eslint.org/docs/rules/no-undefined\n  'no-undefined': 'off',\n\n  // disallow dangling underscores in identifiers\n  // https://eslint.org/docs/rules/no-underscore-dangle\n  'no-underscore-dangle': [\n    'error',\n    {\n      allow:                ['__dirname'],\n      allowAfterThis:       false,\n      allowAfterSuper:      false,\n      enforceInMethodNames: true,\n    },\n  ],\n\n  // disallow the use of Boolean literals in conditional expressions\n  // also, prefer `a || b` over `a ? a : b`\n  // https://eslint.org/docs/rules/no-unneeded-ternary\n  'no-unneeded-ternary': ['error', { defaultAssignment: false }],\n\n  // disallow usage of expressions in statement position\n  // https://eslint.org/docs/rules/no-unused-expressions\n  'no-unused-expressions': [\n    'error',\n    {\n      allowShortCircuit:    false,\n      allowTernary:         false,\n      allowTaggedTemplates: false,\n    },\n  ],\n\n  // disallow unused labels\n  // https://eslint.org/docs/rules/no-unused-labels\n  'no-unused-labels': 'error',\n\n  // disallow unnecessary .call() and .apply()\n  // https://eslint.org/docs/rules/no-useless-call\n  'no-useless-call': 'off',\n\n  // Disallow unnecessary catch clauses\n  // https://eslint.org/docs/rules/no-useless-catch\n  'no-useless-catch': 'error',\n\n  // disallow useless computed property keys\n  // https://eslint.org/docs/rules/no-useless-computed-key\n  'no-useless-computed-key': 'error',\n\n  // disallow useless string concatenation\n  // https://eslint.org/docs/rules/no-useless-concat\n  'no-useless-concat': 'error',\n\n  // disallow unnecessary constructor\n  // https://eslint.org/docs/rules/no-useless-constructor\n  'no-useless-constructor': 'error',\n\n  // disallow unnecessary string escaping\n  // https://eslint.org/docs/rules/no-useless-escape\n  'no-useless-escape': 'error',\n\n  // disallow renaming import, export, and destructured assignments to the same name\n  // https://eslint.org/docs/rules/no-useless-rename\n  'no-useless-rename': [\n    'error',\n    {\n      ignoreDestructuring: false,\n      ignoreImport:        false,\n      ignoreExport:        false,\n    },\n  ],\n\n  // disallow redundant return; keywords\n  // https://eslint.org/docs/rules/no-useless-return\n  'no-useless-return': 'error',\n\n  // require let or const instead of var\n  // https://eslint.org/docs/latest/rules/no-var\n  'no-var': 'error',\n\n  // disallow use of void operator\n  // https://eslint.org/docs/rules/no-void\n  'no-void': 'error',\n\n  // disallow usage of configurable warning terms in comments: e.g. todo\n  // https://eslint.org/docs/rules/no-warning-comments\n  'no-warning-comments': ['off'],\n\n  // disallow use of the with statement\n  // https://eslint.org/docs/rules/no-with\n  'no-with': 'error',\n\n  // require method and property shorthand syntax for object literals\n  // https://eslint.org/docs/rules/object-shorthand\n  'object-shorthand': [\n    'error',\n    'properties',\n    {\n      avoidQuotes: true,\n    },\n  ],\n\n  // allow just one var statement per function\n  // https://eslint.org/docs/latest/rules/one-var\n  'one-var': ['error', 'never'],\n\n  // require assignment operator shorthand where possible or prohibit it entirely\n  // https://eslint.org/docs/rules/operator-assignment\n  'operator-assignment': ['error', 'always'],\n\n  // suggest using arrow functions as callbacks\n  // https://eslint.org/docs/latest/rules/prefer-arrow-callback\n  'prefer-arrow-callback': [\n    'error',\n    {\n      allowNamedFunctions: false,\n      allowUnboundThis:    true,\n    },\n  ],\n\n  // suggest using of const declaration for variables that are never modified after declared\n  // https://eslint.org/docs/latest/rules/prefer-const\n  'prefer-const': [\n    'error',\n    {\n      destructuring:          'any',\n      ignoreReadBeforeAssign: true,\n    },\n  ],\n\n  // Prefer destructuring from arrays and objects\n  // https://eslint.org/docs/rules/prefer-destructuring\n  'prefer-destructuring': [\n    'error',\n    {\n      VariableDeclarator: {\n        array:  false,\n        object: true,\n      },\n      AssignmentExpression: {\n        array:  true,\n        object: false,\n      },\n    },\n    {\n      enforceForRenamedProperties: false,\n    },\n  ],\n\n  // Disallow the use of Math.pow in favor of the ** operator\n  // https://eslint.org/docs/rules/prefer-exponentiation-operator\n  'prefer-exponentiation-operator': 'error',\n\n  // Suggest using named capture group in regular expression\n  // https://eslint.org/docs/rules/prefer-named-capture-group\n  'prefer-named-capture-group': 'off',\n\n  // disallow parseInt() in favor of binary, octal, and hexadecimal literals\n  // https://eslint.org/docs/rules/prefer-numeric-literals\n  'prefer-numeric-literals': 'error',\n\n  // Disallow use of Object.prototype.hasOwnProperty.call() and prefer use of Object.hasOwn()\n  // https://eslint.org/docs/latest/rules/prefer-object-has-own\n  'prefer-object-has-own': 'off',\n\n  // Prefer use of an object spread over Object.assign\n  // https://eslint.org/docs/rules/prefer-object-spread\n  'prefer-object-spread': 'error',\n\n  // require using Error objects as Promise rejection reasons\n  // https://eslint.org/docs/rules/prefer-promise-reject-errors\n  'prefer-promise-reject-errors': ['error', { allowEmptyReject: true }],\n\n  // Disallow use of the RegExp constructor in favor of regular expression literals\n  // https://eslint.org/docs/rules/prefer-regex-literals\n  'prefer-regex-literals': [\n    'error',\n    {\n      disallowRedundantWrapping: true,\n    },\n  ],\n\n  // use rest parameters instead of arguments\n  // https://eslint.org/docs/rules/prefer-rest-params\n  'prefer-rest-params': 'error',\n\n  // suggest using the spread syntax instead of .apply()\n  // https://eslint.org/docs/rules/prefer-spread\n  'prefer-spread': 'error',\n\n  // suggest using template literals instead of string concatenation\n  // https://eslint.org/docs/rules/prefer-template\n  'prefer-template': 'error',\n\n  // require use of the second argument for parseInt()\n  // https://eslint.org/docs/rules/radix\n  radix: 'error',\n\n  // require `await` in `async function` (note: this is a horrible rule that should never be used)\n  // https://eslint.org/docs/rules/require-await\n  'require-await': 'off',\n\n  // Enforce the use of u flag on RegExp\n  // https://eslint.org/docs/rules/require-unicode-regexp\n  'require-unicode-regexp': 'off',\n\n  // disallow generator functions that do not have yield\n  // https://eslint.org/docs/rules/require-yield\n  'require-yield': 'error',\n\n  // import sorting\n  // https://eslint.org/docs/rules/sort-imports\n  'sort-imports': ['off'],\n\n  // requires object keys to be sorted\n  // https://eslint.org/docs/latest/rules/sort-keys\n  'sort-keys': ['off'],\n\n  // sort variables within the same declaration block\n  // https://eslint.org/docs/latest/rules/sort-vars\n  'sort-vars': 'off',\n\n  // babel inserts `'use strict';` for us\n  // https://eslint.org/docs/latest/rules/strict\n  strict: ['error', 'never'],\n\n  // require a Symbol description\n  // https://eslint.org/docs/rules/symbol-description\n  'symbol-description': 'error',\n\n  // requires to declare all vars on top of their containing scope\n  // https://eslint.org/docs/rules/vars-on-top\n  'vars-on-top': 'error',\n\n  // require or disallow Yoda conditions\n  // https://eslint.org/docs/rules/yoda\n  yoda: 'error',\n};\n","export default {\n  // enforce position of line comments\n  // https://eslint.org/docs/rules/line-comment-position\n  'line-comment-position': ['off'],\n\n  // require or disallow the Unicode Byte Order Mark\n  // https://eslint.org/docs/rules/unicode-bom\n  'unicode-bom': ['error', 'never'],\n};\n","import js from '@eslint/js';\nimport possibleProblems from './possibleProblems.js';\nimport suggestions from './suggestions.js';\nimport layoutFormatting from './layoutFormatting.js';\n\nexport default {\n  ...js.configs.recommended.rules,\n  ...possibleProblems,\n  ...suggestions,\n  ...layoutFormatting,\n};\n","import rules from './rules/index.js';\n\nexport default { rules };\n","// @see https://typescript-eslint.io/rules/?=xrecommended-xstrict-xstylistic\n\nexport default {\n  // Enforce that class methods utilize this.\n  // https://typescript-eslint.io/rules/class-methods-use-this\n  // use eslint rule\n  'class-methods-use-this': 'off',\n\n  // Require return statements to either always or never specify values.\n  // https://typescript-eslint.io/rules/consistent-return/\n  // TODO emit error: Could not find \"consistent-return\" in plugin \"@typescript-eslint\", so disable this rule\n  // 'consistent-return': 'error',\n\n  // Enforce consistent usage of type exports.\n  // https://typescript-eslint.io/rules/consistent-type-exports/\n  'consistent-type-exports': 'off',\n\n  // Enforce consistent usage of type imports.\n  // https://typescript-eslint.io/rules/consistent-type-imports/\n  'consistent-type-imports': [\n    'error',\n    {\n      fixStyle: 'separate-type-imports',\n    },\n  ],\n\n  // Enforce default parameters to be last.\n  // https://typescript-eslint.io/rules/default-param-last/\n  // use eslint rule\n  'default-param-last': 'off',\n\n  // Require explicit return types on functions and class methods.\n  // https://typescript-eslint.io/rules/\n  'explicit-function-return-type': 'off',\n\n  // Require explicit accessibility modifiers on class properties and methods.\n  // https://typescript-eslint.io/rules/explicit-member-accessibility\n  'explicit-member-accessibility': 'error',\n\n  // Require explicit return and argument types on exported functions' and classes' public class methods.\n  // https://typescript-eslint.io/rules/explicit-module-boundary-types/\n  'explicit-module-boundary-types': 'off',\n\n  // Require or disallow initialization in variable declarations.\n  // https://typescript-eslint.io/rules/init-declarations/\n  // use eslint rule\n  'init-declarations': 'off',\n\n  // Enforce a maximum number of parameters in function definitions.\n  // https://typescript-eslint.io/rules/max-params/\n  // use eslint rule\n  'max-params': 'off',\n\n  // member-ordering\n  // https://typescript-eslint.io/rules/member-ordering/\n  // priority：\n  // 0. signature\n  // 1. static > instance > decorated > abstract\n  // 2. field > constructor > get > set > method\n  // 3. public > protected > private > #private\n  // 4. not readonly > readonly\n  // 5. bottom of all\n  'member-ordering': [\n    'error',\n    {\n      default: [\n        // #region signature\n        'signature',\n        'call-signature',\n        'readonly-signature',\n        // #endregion\n\n        // #region static\n        // Fields\n        'public-static-field',\n        'public-static-readonly-field',\n        'protected-static-readonly-field',\n        'protected-static-field',\n        'private-static-field',\n        'private-static-readonly-field',\n        '#private-static-field',\n        '#private-static-readonly-field',\n        'static-field',\n        'static-readonly-field',\n\n        'static-initialization',\n\n        // Getters\n        'public-static-get',\n        'protected-static-get',\n        'private-static-get',\n        '#private-static-get',\n        'static-get',\n\n        // Setters\n        'public-static-set',\n        'protected-static-set',\n        'private-static-set',\n        '#private-static-set',\n        'static-set',\n\n        // Methods\n        'public-static-method',\n        'protected-static-method',\n        'private-static-method',\n        '#private-static-method',\n        'static-method',\n        // #endregion\n\n        // #region instance\n        // Fields\n        'public-instance-field',\n        'public-instance-readonly-field',\n        'protected-instance-field',\n        'protected-instance-readonly-field',\n        'private-instance-field',\n        'private-instance-readonly-field',\n        '#private-instance-field',\n        '#private-instance-readonly-field',\n        'instance-field',\n        'instance-readonly-field',\n\n        // Constructors\n        'public-constructor',\n        'protected-constructor',\n        'private-constructor',\n        'constructor',\n\n        // Getters\n        'public-instance-get',\n        'protected-instance-get',\n        'private-instance-get',\n        '#private-instance-get',\n        'instance-get',\n\n        // Setters\n        'public-instance-set',\n        'protected-instance-set',\n        'private-instance-set',\n        '#private-instance-set',\n        'instance-set',\n\n        // Methods\n        'public-instance-method',\n        'protected-instance-method',\n        'private-instance-method',\n        '#private-instance-method',\n        'instance-method',\n        // #endregion\n\n        // #region decorated\n        // Fields\n        'public-decorated-field',\n        'public-decorated-readonly-field',\n        'protected-decorated-field',\n        'protected-decorated-readonly-field',\n        'private-decorated-field',\n        'private-decorated-readonly-field',\n        'decorated-field',\n        'decorated-readonly-field',\n\n        // Getters\n        'public-decorated-get',\n        'protected-decorated-get',\n        'private-decorated-get',\n        'decorated-get',\n\n        // Setters\n        'public-decorated-set',\n        'protected-decorated-set',\n        'private-decorated-set',\n        'decorated-set',\n\n        // Methods\n        'public-decorated-method',\n        'protected-decorated-method',\n        'private-decorated-method',\n        'decorated-method',\n        // #endregion\n\n        // #region abstract\n        // Fields\n        'public-abstract-field',\n        'public-abstract-readonly-field',\n        'protected-abstract-field',\n        'protected-abstract-readonly-field',\n        'abstract-field',\n        'abstract-readonly-field',\n\n        // Getters\n        'public-abstract-get',\n        'protected-abstract-get',\n        'abstract-get',\n\n        // Setters\n        'public-abstract-set',\n        'protected-abstract-set',\n        'abstract-set',\n\n        // Methods\n        'public-abstract-method',\n        'protected-abstract-method',\n        'abstract-method',\n        // #endregion\n\n        // #region bottom of all\n        'field',\n        'get',\n        'set',\n        'method',\n        // #endregion\n      ],\n    },\n  ],\n\n  // Enforce using a particular method signature syntax.\n  // https://typescript-eslint.io/rules/method-signature-style/\n  'method-signature-style': ['error', 'property'],\n\n  // Enforce naming conventions for everything across a codebase.\n  // https://typescript-eslint.io/rules/naming-convention/#format\n  'naming-convention': 'off',\n\n  // Disallow duplicate class members.\n  // https://typescript-eslint.io/rules/no-dupe-class-members/\n  // use eslint rule\n  'no-dupe-class-members': 'off',\n\n  // Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers.\n  // https://typescript-eslint.io/rules/no-import-type-side-effects/\n  'no-import-type-side-effects': 'error',\n\n  // Disallow this keywords outside of classes or class-like objects.\n  // https://typescript-eslint.io/rules/no-invalid-this/\n  // use eslint rule\n  'no-invalid-this': 'off',\n\n  // Disallow function declarations that contain unsafe references inside loop statements.\n  // https://typescript-eslint.io/rules/no-loop-func/\n  // use eslint rule\n  'no-loop-func': 'off',\n\n  // Disallow magic numbers.\n  // https://typescript-eslint.io/rules/no-magic-numbers/\n  // use eslint rule\n  'no-magic-numbers': 'off',\n\n  // Disallow variable redeclaration.\n  // https://typescript-eslint.io/rules/no-redeclare/\n  // use eslint rule\n  'no-redeclare': 'off',\n\n  // Prefer the newer ES6-style imports over require().\n  // https://typescript-eslint.io/rules/no-require-imports/\n  'no-require-imports': ['error', { allow: ['/package\\\\.json$'] }],\n\n  // Disallow specified modules when loaded by import.\n  // https://typescript-eslint.io/rules/no-restricted-imports/\n  // use eslint rule\n  'no-restricted-imports': 'off',\n\n  // Disallow variable declarations from shadowing variables declared in the outer scope.\n  // https://typescript-eslint.io/rules/no-shadow/\n  'no-shadow': 'off',\n\n  // Disallow unnecessary namespace qualifiers.\n  // https://typescript-eslint.io/rules/no-unnecessary-qualifier/\n  'no-unnecessary-qualifier': 'off',\n\n  // Require unary negation to take a number.\n  // https://typescript-eslint.io/rules/no-unsafe-unary-minus/\n  'no-unsafe-unary-minus': 'error',\n\n  // Disallow unused expressions.\n  // https://typescript-eslint.io/rules/no-unused-expressions/\n  // use eslint rule\n  'no-unused-expressions': 'off',\n\n  // Disallow the use of variables before they are defined.\n  // https://typescript-eslint.io/rules/no-use-before-define/\n  'no-use-before-define': [\n    'error',\n    {\n      enums:                true,\n      typedefs:             true,\n      ignoreTypeReferences: false,\n    },\n  ],\n\n  // Disallow empty exports that don't change anything in a module file.\n  // https://typescript-eslint.io/rules/no-useless-empty-export/\n  'no-useless-empty-export': 'error',\n\n  // Require or disallow parameter properties in class constructors.\n  // https://typescript-eslint.io/rules/parameter-properties/\n  'parameter-properties': 'off',\n\n  // Require destructuring from arrays and/or objects.\n  // https://typescript-eslint.io/rules/prefer-destructuring/#enforcefordeclarationwithtypeannotation\n  // use eslint rule\n  'prefer-destructuring': 'off',\n\n  // Require each enum member value to be explicitly initialized.\n  // https://typescript-eslint.io/rules/prefer-enum-initializers/\n  'prefer-enum-initializers': 'off',\n\n  // Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result.\n  // https://typescript-eslint.io/rules/prefer-find/\n  'prefer-find': 'off',\n\n  // Require private members to be marked as readonly if they're never modified outside of the constructor.\n  // https://typescript-eslint.io/rules/prefer-readonly/\n  'prefer-readonly': 'off',\n\n  // Require function parameters to be typed as readonly to prevent accidental mutation of inputs.\n  // https://typescript-eslint.io/rules/prefer-readonly-parameter-types/\n  'prefer-readonly-parameter-types': 'off',\n\n  // Enforce RegExp#exec over String#match if no global flag is provided.\n  // https://typescript-eslint.io/rules/prefer-regexp-exec/\n  'prefer-regexp-exec': 'off',\n\n  // Require any function or method that returns a Promise to be marked async.\n  // https://typescript-eslint.io/rules/promise-function-async/\n  'promise-function-async': 'off',\n\n  // Require Array#sort and Array#toSorted calls to always provide a compareFunction.\n  // https://typescript-eslint.io/rules/require-array-sort-compare/\n  'require-array-sort-compare': ['error', { ignoreStringArrays: true }],\n\n  // Enforce consistent returning of awaited values.\n  // https://typescript-eslint.io/rules/return-await\n  'return-await': 'off',\n\n  // Enforce constituents of a type union/intersection to be sorted alphabetically.\n  // https://typescript-eslint.io/rules/sort-type-constituents/\n  'sort-type-constituents': 'off',\n\n  'strict-boolean-expressions': [\n    'error',\n    {\n      allowString:                                            false,\n      allowNumber:                                            false,\n      allowNullableObject:                                    false,\n      allowNullableBoolean:                                   false,\n      allowNullableString:                                    false,\n      allowNullableNumber:                                    false,\n      allowNullableEnum:                                      false,\n      allowAny:                                               false,\n      allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,\n    },\n  ],\n\n  // Require switch-case statements to be exhaustive.\n  // https://typescript-eslint.io/rules/switch-exhaustiveness-check/\n  'switch-exhaustiveness-check': 'off',\n\n  // Require type annotations in certain places.\n  // https://typescript-eslint.io/rules/typedef/\n  typedef: [\n    'error',\n    {\n      arrayDestructuring:                false,\n      arrowParameter:                    false,\n      memberVariableDeclaration:         false,\n      objectDestructuring:               false,\n      parameter:                         false,\n      propertyDeclaration:               true,\n      variableDeclaration:               false,\n      variableDeclarationIgnoreFunction: false,\n    },\n  ],\n};\n","// @see https://typescript-eslint.io/rules/?=stylistic\n\nexport default {\n  // Require that function overload signatures be consecutive.\n  // https://typescript-eslint.io/rules/adjacent-overload-signatures\n  'adjacent-overload-signatures': 'error',\n\n  // Require consistently using either T[] or Array<T> for arrays.\n  // https://typescript-eslint.io/rules/array-type\n  'array-type': 'off',\n\n  // Disallow // tslint:<rule-flag> comments.\n  // https://typescript-eslint.io/rules/ban-tslint-comment/\n  'ban-tslint-comment': 'off',\n\n  // Enforce that literals on classes are exposed in a consistent style.\n  // https://typescript-eslint.io/rules/class-literal-property-style/\n  'class-literal-property-style': ['error', 'fields'],\n\n  // Enforce specifying generic type arguments on type annotation or constructor name of a constructor call.\n  // https://typescript-eslint.io/rules/consistent-generic-constructors/\n  'consistent-generic-constructors': ['error', 'constructor'],\n\n  // Require or disallow the Record type.\n  // https://typescript-eslint.io/rules/consistent-indexed-object-style/\n  'consistent-indexed-object-style': ['error', 'record'],\n\n  // Enforce consistent usage of type assertions.\n  // https://typescript-eslint.io/rules/consistent-type-assertions/\n  'consistent-type-assertions': [\n    'error',\n    {\n      assertionStyle:              'as',\n      objectLiteralTypeAssertions: 'never',\n    },\n  ],\n\n  // Enforce type definitions to consistently use either interface or type.\n  // https://typescript-eslint.io/rules/consistent-type-definitions/\n  'consistent-type-definitions': ['error', 'interface'],\n\n  // Enforce dot notation whenever possible.\n  // https://typescript-eslint.io/rules/dot-notation/\n  // use eslint rule\n  'dot-notation': ['off'],\n\n  // Disallow non-null assertion in locations that may be confusing.\n  // https://typescript-eslint.io/rules/no-confusing-non-null-assertion/\n  'no-confusing-non-null-assertion': 'off',\n\n  // Disallow empty functions.\n  // https://typescript-eslint.io/rules/no-empty-function/\n  // use eslint rule\n  'no-empty-function': 'off',\n\n  // Disallow the declaration of empty interfaces.\n  // https://typescript-eslint.io/rules/no-empty-interface/\n  'no-empty-interface': 'error',\n\n  // Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean.\n  // https://typescript-eslint.io/rules/no-inferrable-types/\n  'no-inferrable-types': 'error',\n\n  // Enforce non-null assertions over explicit type casts.\n  // https://typescript-eslint.io/rules/non-nullable-type-assertion-style/\n  'non-nullable-type-assertion-style': 'off',\n\n  // Enforce the use of for-of loop over the standard for loop where possible.\n  // https://typescript-eslint.io/rules/prefer-for-of/\n  'prefer-for-of': 'error',\n\n  // Enforce using function types instead of interfaces with call signatures.\n  // https://typescript-eslint.io/rules/prefer-function-type/\n  'prefer-function-type': 'error',\n\n  // Enforce using the nullish coalescing operator instead of logical assignments or chaining.\n  // https://typescript-eslint.io/rules/prefer-nullish-coalescing\n  'prefer-nullish-coalescing': 'error',\n\n  // Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects.\n  // https://typescript-eslint.io/rules/prefer-optional-chain/\n  'prefer-optional-chain': 'error',\n\n  // Enforce using String#startsWith and String#endsWith over other equivalent methods of checking substrings.\n  // https://typescript-eslint.io/rules/prefer-string-starts-ends-with/\n  'prefer-string-starts-ends-with': 'error',\n};\n","// @see https://typescript-eslint.io/rules/?=recommended\n\nexport default {\n  // Disallow awaiting a value that is not a Thenable.\n  // https://typescript-eslint.io/rules/await-thenable/\n  'await-thenable': 'off',\n\n  // Disallow @ts-<directive> comments or require descriptions after directives.\n  // https://typescript-eslint.io/rules/ban-ts-comment/\n  'ban-ts-comment': 'off',\n\n  // Disallow certain types.\n  // https://typescript-eslint.io/rules/ban-types/\n  'ban-types': 'off',\n\n  // Disallow generic Array constructors.\n  // https://typescript-eslint.io/rules/no-array-constructor/\n  // use eslint rule\n  'no-array-constructor': 'off',\n\n  // Require .toString() to only be called on objects which provide useful information when stringified.\n  // https://typescript-eslint.io/rules/no-base-to-string/\n  'no-base-to-string': 'off',\n\n  // Disallow duplicate enum member values\n  // https://typescript-eslint.io/rules/no-duplicate-enum-values/\n  'no-duplicate-enum-values': 'error',\n\n  // Disallow duplicate constituents of union or intersection types.\n  // https://typescript-eslint.io/rules/no-duplicate-type-constituents/\n  'no-duplicate-type-constituents': 'off',\n\n  // Disallow the any type.\n  // https://typescript-eslint.io/rules/no-explicit-any/\n  'no-explicit-any': 'warn',\n\n  // Disallow extra non-null assertions.\n  // https://typescript-eslint.io/rules/no-extra-non-null-assertion/\n  'no-extra-non-null-assertion': 'error',\n\n  // Require Promise-like statements to be handled appropriately.\n  // https://typescript-eslint.io/rules/no-floating-promises/\n  'no-floating-promises': 'off',\n\n  // Disallow iterating over an array with a for-in loop.\n  // https://typescript-eslint.io/rules/no-for-in-array/\n  'no-for-in-array': 'off',\n\n  // Disallow the use of eval()-like methods.\n  // https://typescript-eslint.io/rules/no-implied-eval/\n  // use eslint rule https://eslint.org/docs/latest/rules/no-implied-eval\n  'no-implied-eval': 'off',\n\n  // Disallow literal numbers that lose precision.\n  // https://typescript-eslint.io/rules/no-loss-of-precision/\n  // use eslint rule\n  'no-loss-of-precision': 'off',\n\n  // Enforce valid definition of new and constructor.\n  // https://typescript-eslint.io/rules/no-misused-new/\n  'no-misused-new': 'off',\n\n  // Disallow Promises in places not designed to handle them\n  // https://typescript-eslint.io/rules/no-misused-promises/\n  'no-misused-promises': 'off',\n\n  // Disallow TypeScript namespaces.\n  // https://typescript-eslint.io/rules/no-namespace/\n  'no-namespace': [\n    'error',\n    {\n      allowDeclarations:    true,\n      allowDefinitionFiles: true,\n    },\n  ],\n\n  // Disallow non-null assertions after an optional chain expression.\n  // https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain/\n  'no-non-null-asserted-optional-chain': 'error',\n\n  // Disallow members of unions and intersections that do nothing or override type information.\n  // https://typescript-eslint.io/rules/no-redundant-type-constituents/\n  'no-redundant-type-constituents': 'off',\n\n  // Disallow aliasing this.\n  // https://typescript-eslint.io/rules/no-this-alias/\n  'no-this-alias': [\n    'error',\n    {\n      allowDestructuring: true,\n    },\n  ],\n\n  // Disallow type assertions that do not change the type of an expression.\n  // https://typescript-eslint.io/rules/no-unnecessary-type-assertion/\n  'no-unnecessary-type-assertion': 'off',\n\n  // Disallow unnecessary constraints on generic types.\n  // https://typescript-eslint.io/rules/no-unnecessary-type-constraint/\n  'no-unnecessary-type-constraint': 'error',\n\n  // Disallow calling a function with a value with type any.\n  // https://typescript-eslint.io/rules/no-unsafe-argument/\n  'no-unsafe-argument': 'off',\n\n  // Disallow assigning a value with type any to variables and properties.\n  // https://typescript-eslint.io/rules/no-unsafe-assignment/\n  'no-unsafe-assignment': 'off',\n\n  // Disallow calling a value with type any.\n  // https://typescript-eslint.io/rules/no-unsafe-call/\n  'no-unsafe-call': 'off',\n\n  // Disallow unsafe declaration merging.\n  // https://typescript-eslint.io/rules/no-unsafe-declaration-merging/\n  'no-unsafe-declaration-merging': 'off',\n\n  // Disallow comparing an enum value with a non-enum value.\n  // https://typescript-eslint.io/rules/no-unsafe-enum-comparison/\n  'no-unsafe-enum-comparison': 'off',\n\n  // Disallow member access on a value with type any.\n  // https://typescript-eslint.io/rules/no-unsafe-member-access/\n  'no-unsafe-member-access': 'off',\n\n  // Disallow returning a value with type any from a function.\n  // https://typescript-eslint.io/rules/no-unsafe-return/\n  'no-unsafe-return': 'off',\n\n  // Disallow unused variables.\n  // https://typescript-eslint.io/rules/no-unused-vars/\n  // use eslint rule\n  'no-unused-vars': 'off',\n\n  // Disallow require statements except in import statements.\n  // https://typescript-eslint.io/rules/no-var-requires/\n  // repeat with https://typescript-eslint.io/rules/no-require-imports/\n  'no-var-requires': 'off',\n\n  // Enforce the use of as const over literal type.\n  // https://typescript-eslint.io/rules/prefer-as-const/\n  'prefer-as-const': 'error',\n\n  // Disallow async functions which have no await expression.\n  // https://typescript-eslint.io/rules/require-await/\n  // use eslint rule\n  'require-await': 'off',\n\n  // Require both operands of addition to be the same type and be bigint, number, or string.\n  // https://typescript-eslint.io/rules/restrict-plus-operands/\n  'restrict-plus-operands': [\n    'error',\n    {\n      allowAny:                false,\n      allowBoolean:            false,\n      allowNullish:            false,\n      allowNumberAndString:    false,\n      allowRegExp:             false,\n      skipCompoundAssignments: false,\n    },\n  ],\n\n  // Enforce template literal expressions to be of string type.\n  // https://typescript-eslint.io/rules/restrict-template-expressions/\n  'restrict-template-expressions': [\n    'error',\n    {\n      allowAny:     false,\n      allowBoolean: false,\n      allowNullish: false,\n      allowNumber:  false,\n      allowRegExp:  false,\n    },\n  ],\n\n  // Disallow certain triple slash directives in favor of ES6-style import declarations.\n  // https://typescript-eslint.io/rules/triple-slash-reference/\n  'triple-slash-reference': [\n    'error',\n    {\n      path:  'never',\n      types: 'always',\n      lib:   'always',\n    },\n  ],\n\n  // Enforce unbound methods are called with their expected scope.\n  // https://typescript-eslint.io/rules/unbound-method/\n  'unbound-method': 'off',\n};\n","// @see https://typescript-eslint.io/rules/?=xrecommended-strict\n\nexport default {\n  // Disallow using the delete operator on array values.\n  // https://typescript-eslint.io/rules/no-array-delete/\n  'no-array-delete': 'error',\n\n  // Require expressions of type void to appear in statement position.\n  // https://typescript-eslint.io/rules/no-confusing-void-expression/\n  'no-confusing-void-expression': 'off',\n\n  // Disallow using the delete operator on computed key expressions.\n  // https://typescript-eslint.io/rules/no-dynamic-delete/\n  'no-dynamic-delete': 'off',\n\n  // Disallow classes used as namespaces.\n  // https://typescript-eslint.io/rules/no-extraneous-class/\n  'no-extraneous-class': 'off',\n\n  // Disallow void type outside of generic or return types.\n  // https://typescript-eslint.io/rules/no-invalid-void-type/\n  'no-invalid-void-type': 'error',\n\n  // Disallow the void operator except when used to discard a value.\n  // https://typescript-eslint.io/rules/no-meaningless-void-operator/\n  'no-meaningless-void-operator': 'error',\n\n  // Disallow enums from having both number and string members.\n  // https://typescript-eslint.io/rules/no-mixed-enums/\n  'no-mixed-enums': 'error',\n\n  // Disallow non-null assertions in the left operand of a nullish coalescing operator.\n  // https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing/\n  'no-non-null-asserted-nullish-coalescing': 'error',\n\n  // Disallow non-null assertions using the ! postfix operator.\n  // https://typescript-eslint.io/rules/no-non-null-assertion/\n  'no-non-null-assertion': 'off',\n\n  // Disallow throwing literals as exceptions.\n  // https://typescript-eslint.io/rules/no-throw-literal/\n  'no-throw-literal': 'off',\n\n  // Disallow unnecessary equality comparisons against boolean literals.\n  // https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare/\n  'no-unnecessary-boolean-literal-compare': 'off',\n\n  // Disallow conditionals where the type is always truthy or always falsy.\n  // https://typescript-eslint.io/rules/no-unnecessary-condition/\n  'no-unnecessary-condition': 'off',\n\n  // Disallow type arguments that are equal to the default.\n  // https://typescript-eslint.io/rules/no-unnecessary-type-arguments/\n  'no-unnecessary-type-arguments': 'off',\n\n  // Disallow unnecessary constructors.\n  // https://typescript-eslint.io/rules/no-useless-constructor/\n  // use eslint rule\n  'no-useless-constructor': 'off',\n\n  // Disallow unnecessary template literals.\n  // https://typescript-eslint.io/rules/no-useless-template-literals/\n  'no-useless-template-literals': 'error',\n\n  // Enforce includes method over indexOf method.\n  // https://typescript-eslint.io/rules/prefer-includes/\n  'prefer-includes': 'error',\n\n  // Require all enum members to be literal values.\n  // https://typescript-eslint.io/rules/prefer-literal-enum-member/\n  'prefer-literal-enum-member': 'error',\n\n  // Require using namespace keyword over module keyword to declare custom TypeScript modules.\n  // https://typescript-eslint.io/rules/prefer-namespace-keyword/\n  'prefer-namespace-keyword': 'error',\n\n  // Require using Error objects as Promise rejection reasons.\n  // https://typescript-eslint.io/rules/prefer-promise-reject-errors/\n  // use eslint rule\n  'prefer-promise-reject-errors': 'off',\n\n  // Enforce using type parameter when calling Array#reduce instead of casting.\n  // https://typescript-eslint.io/rules/prefer-reduce-type-parameter/\n  'prefer-reduce-type-parameter': 'off',\n\n  // Enforce that this is used when only this type is returned.\n  // https://typescript-eslint.io/rules/prefer-return-this-type/\n  'prefer-return-this-type': 'off',\n\n  // Enforce using @ts-expect-error over @ts-ignore.\n  // https://typescript-eslint.io/rules/prefer-ts-expect-error/\n  'prefer-ts-expect-error': 'error',\n\n  // Disallow two overloads that could be unified into one with a union or an optional/rest parameter.\n  // https://typescript-eslint.io/rules/unified-signatures/\n  'unified-signatures': ['error', { ignoreDifferentlyNamedParameters: false }],\n};\n","function addPluginNameToRules(\n  pluginName: string,\n  rules: Record<string, unknown>,\n) {\n  return Object.keys(rules).reduce(\n    (result: Record<string, unknown>, key: string) => Object.assign(result, { [`${pluginName}/${key}`]: rules[key] }),\n    {},\n  );\n}\n\nexport function addPluginName(\n  pluginName: string,\n  rules: Record<string, unknown> | Array<Record<string, unknown>>,\n) {\n  if (rules instanceof Array) {\n    return rules.reduce(\n      (result, group) => Object.assign(\n        result,\n        addPluginNameToRules(pluginName, group),\n      ),\n      {},\n    );\n  }\n  return addPluginNameToRules(pluginName, rules);\n}\n","import base from './base.js';\nimport stylistic from './stylistic.js';\nimport recommended from './recommended.js';\nimport strict from './strict.js';\nimport { addPluginName } from '../../../util/ruleTools.js';\n\nconst ruleGroups = [base, stylistic, recommended, strict];\n\nfunction getRules(pluginName: string): Record<string, unknown> {\n  return addPluginName(pluginName, ruleGroups);\n}\n\nexport default { getRules };\n","import rules from './rules/index.js';\nimport tseslint from 'typescript-eslint';\n\nconst config: Object = {\n  languageOptions: {\n    parser:        tseslint.parser,\n    parserOptions: {\n      // @see https://typescript-eslint.io/rules/consistent-type-imports/#usage-with-emitdecoratormetadata\n      emitDecoratorMetadata: true,\n    },\n  },\n  plugins: {\n    '@typescript-eslint': tseslint.plugin,\n  },\n  rules: rules.getRules('@typescript-eslint'),\n};\n\nexport default config;\n","// @see https://eslint.style/rules\n\nimport { addPluginName } from '../../util/ruleTools.js';\n\nconst rules = {\n  // Enforce linebreaks after opening and before closing array brackets\n  // https://eslint.style/rules/default/array-bracket-newline\n  'array-bracket-newline': ['error', 'consistent'],\n\n  // Enforce consistent spacing inside array brackets\n  // https://eslint.style/rules/default/array-bracket-spacing\n  'array-bracket-spacing': ['error', 'never'],\n\n  // Enforce line breaks after each array element\n  // https://eslint.style/rules/default/array-element-newline\n  'array-element-newline': ['error', 'consistent'],\n\n  // Require parentheses around arrow function\n  // https://eslint.style/rules/default/arrow-parens\n  'arrow-parens': ['error', 'always'],\n\n  // Enforce consistent spacing before and after the arrow in arrow functions\n  // https://eslint.style/rules/default/arrow-spacing\n  'arrow-spacing': ['error', { before: true, after: true }],\n\n  // Disallow or enforce spaces inside of blocks after opening block and before closing block\n  // https://eslint.style/rules/default/block-spacing\n  'block-spacing': ['error', 'always'],\n\n  // Enforce consistent brace style for blocks\n  // https://eslint.style/rules/default/brace-style\n  'brace-style': ['error', '1tbs', { allowSingleLine: true }],\n\n  // Require or disallow trailing commas\n  // https://eslint.style/rules/default/comma-dangle\n  'comma-dangle': ['error', 'always-multiline'],\n\n  // Enforce consistent spacing before and after commas\n  // https://eslint.style/rules/default/comma-spacing\n  'comma-spacing': ['error', { before: false, after: true }],\n\n  // Enforce consistent comma style\n  // https://eslint.style/rules/default/comma-style\n  'comma-style': ['error', 'last'],\n\n  // Enforce consistent spacing inside computed property brackets\n  // https://eslint.style/rules/default/computed-property-spacing\n  'computed-property-spacing': [\n    'error',\n    'never',\n    { enforceForClassMembers: true },\n  ],\n\n  // Enforce consistent newlines before and after dots\n  // https://eslint.style/rules/default/dot-location\n  'dot-location': ['error', 'property'],\n\n  // Require or disallow newline at the end of files\n  // https://eslint.style/rules/default/eol-last\n  'eol-last': ['error', 'always'],\n\n  // Enforce line breaks between arguments of a function call\n  // https://eslint.style/rules/default/function-call-argument-newline\n  'function-call-argument-newline': ['error', 'consistent'],\n\n  // Require or disallow spacing between function identifiers and their invocations\n  // https://eslint.style/rules/default/function-call-spacing\n  'function-call-spacing': ['error', 'never'],\n\n  // Enforce consistent line breaks inside function parentheses\n  // https://eslint.style/rules/default/function-paren-newline\n  'function-paren-newline': ['error', 'multiline-arguments'],\n\n  // Enforce consistent spacing around `*` operators in generator functions\n  // https://eslint.style/rules/default/generator-star-spacing\n  'generator-star-spacing': ['error', { before: false, after: true }],\n\n  // Enforce the location of arrow function bodies\n  // https://eslint.style/rules/default/implicit-arrow-linebreak\n  'implicit-arrow-linebreak': ['error', 'beside'],\n\n  // Enforce consistent indentation\n  // https://eslint.style/rules/default/indent\n  indent: [\n    'error',\n    2,\n    {\n      SwitchCase:               1,\n      VariableDeclarator:       'first',\n      FunctionDeclaration:      { parameters: 'first', body: 1 },\n      FunctionExpression:       { parameters: 'first', body: 1 },\n      CallExpression:           { arguments: 'first' },\n      ArrayExpression:          'first',\n      ObjectExpression:         'first',\n      ImportDeclaration:        'first',\n      flatTernaryExpressions:   true,\n      offsetTernaryExpressions: true,\n      ignoreComments:           false,\n    },\n  ],\n\n  // Indentation for binary operators\n  // https://eslint.style/rules/default/indent-binary-ops\n  'indent-binary-ops': ['error', 2],\n\n  // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions\n  // https://eslint.style/rules/default/jsx-child-element-spacing\n  'jsx-child-element-spacing': 'error',\n\n  // Enforce closing bracket location in JSX\n  // https://eslint.style/rules/default/jsx-closing-bracket-location\n  'jsx-closing-bracket-location': ['error', 'tag-aligned'],\n\n  // Enforce closing tag location for multiline JSX\n  // https://eslint.style/rules/default/jsx-closing-tag-location\n  'jsx-closing-tag-location': 'error',\n\n  // Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes\n  // https://eslint.style/rules/default/jsx-curly-brace-presence\n  'jsx-curly-brace-presence': [\n    'error',\n    { props: 'never', children: 'never', propElementValues: 'always' },\n  ],\n\n  // Enforce consistent linebreaks in curly braces in JSX attributes and expressions\n  // https://eslint.style/rules/default/jsx-curly-newline\n  'jsx-curly-newline': [\n    'error',\n    { multiline: 'consistent', singleline: 'consistent' },\n  ],\n\n  // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions\n  // https://eslint.style/rules/default/jsx-curly-spacing\n  'jsx-curly-spacing': ['error', { when: 'never' }],\n\n  // Enforce or disallow spaces around equal signs in JSX attributes\n  // https://eslint.style/rules/default/jsx-equals-spacing\n  'jsx-equals-spacing': ['error', 'never'],\n\n  // Enforce proper position of the first property in JSX\n  // https://eslint.style/rules/default/jsx-first-prop-new-line\n  'jsx-first-prop-new-line': ['error', 'multiline-multiprop'],\n\n  // Enforce JSX indentation\n  // https://eslint.style/rules/default/jsx-indent\n  'jsx-indent': [\n    'error',\n    2,\n    { checkAttributes: true, indentLogicalExpressions: true },\n  ],\n\n  // Enforce props indentation in JSX\n  // https://eslint.style/rules/default/jsx-indent-props\n  'jsx-indent-props': ['error', 'first'],\n\n  // Enforce maximum of props on a single line in JSX\n  // https://eslint.style/rules/default/jsx-max-props-per-line\n  'jsx-max-props-per-line': 'off',\n\n  // Require or prevent a new line after jsx elements and expressions.\n  // https://eslint.style/rules/default/jsx-newline\n  'jsx-newline': ['error', { prevent: false, allowMultilines: false }],\n\n  // Require one JSX element per line\n  // https://eslint.style/rules/default/jsx-one-expression-per-line\n  'jsx-one-expression-per-line': 'off',\n\n  // Enforce PascalCase for user-defined JSX components\n  // https://eslint.style/rules/default/jsx-pascal-case\n  'jsx-pascal-case': ['error', { allowAllCaps: true }],\n\n  // Disallow multiple spaces between inline JSX props\n  // https://eslint.style/rules/default/jsx-props-no-multi-spaces\n  'jsx-props-no-multi-spaces': 'error',\n\n  // Enforce the consistent use of either double or single quotes in JSX attributes\n  // https://eslint.style/rules/default/jsx-quotes\n  'jsx-quotes': ['error', 'prefer-double'],\n\n  // Disallow extra closing tags for components without children\n  // https://eslint.style/rules/default/jsx-self-closing-comp\n  'jsx-self-closing-comp': ['error', {\n    component: true,\n    html:      true,\n  }],\n\n  // Enforce props alphabetical sorting\n  // https://eslint.style/rules/default/jsx-sort-props\n  'jsx-sort-props': ['error', {\n    callbacksLast:  true,\n    shorthandFirst: true,\n    ignoreCase:     false,\n    multiline:      'ignore',\n    reservedFirst:  ['children', 'dangerouslySetInnerHTML', 'key', 'ref'],\n    locale:         'auto',\n  }],\n\n  // Enforce whitespace in and around the JSX opening and closing brackets\n  // https://eslint.style/rules/default/jsx-tag-spacing\n  'jsx-tag-spacing': ['error', {\n    closingSlash: 'never', beforeSelfClosing: 'proportional-always', afterOpening: 'never', beforeClosing: 'proportional-always',\n  }],\n\n  // Disallow missing parentheses around multiline JSX\n  // https://eslint.style/rules/default/jsx-wrap-multilines\n  'jsx-wrap-multilines': ['error', {\n    declaration: 'parens-new-line',\n    assignment:  'parens-new-line',\n    return:      'parens-new-line',\n    arrow:       'parens-new-line',\n    condition:   'parens-new-line',\n    logical:     'parens-new-line',\n    prop:        'parens-new-line',\n  }],\n\n  // Enforce consistent spacing between keys and values in object literal properties\n  // https://eslint.style/rules/default/key-spacing\n  'key-spacing': ['error', {\n    beforeColon: false,\n    afterColon:  true,\n    mode:        'strict',\n    align:       {\n      beforeColon: false,\n      afterColon:  true,\n      on:          'value',\n      mode:        'strict',\n    },\n    // multiLine: {\n    //   \"beforeColon\": false,\n    //   \"afterColon\": true,\n    //   \"align\": \"value\",\n    //   mode: 'strict',\n    // },\n    // \"singleLine\": {\n    //   \"beforeColon\": false,\n    //   \"afterColon\": true,\n    //   mode: 'strict',\n    // },\n  }],\n\n  // Enforce consistent spacing before and after keywords\n  // https://eslint.style/rules/default/keyword-spacing\n  'keyword-spacing': ['error', {\n    before: true,\n    after:  true,\n  }],\n\n  // Enforce consistent linebreak style\n  // eslint.style/rules/default/linebreak-style\n  'linebreak-style': ['error', 'unix'],\n\n  // Require empty lines around comments\n  // https://eslint.style/rules/default/lines-around-comment\n  'lines-around-comment': 'off',\n\n  // Require or disallow an empty line between class members\n  // https://eslint.style/rules/default/lines-between-class-members\n  'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],\n\n  // Enforce a maximum line length\n  // https://eslint.style/rules/default/max-len\n  'max-len': ['error', {\n    tabWidth:               2,\n    ignoreComments:         true,\n    ignoreTrailingComments: true,\n    ignoreUrls:             true,\n    ignoreStrings:          true,\n    ignoreTemplateLiterals: true,\n    ignoreRegExpLiterals:   true,\n  }],\n\n  // Enforce a maximum number of statements allowed per line\n  // https://eslint.style/rules/default/max-statements-per-line\n  'max-statements-per-line': 'off',\n\n  // Require a specific member delimiter style for interfaces and type literals\n  // https://eslint.style/rules/default/member-delimiter-style\n  'member-delimiter-style': ['error', {\n    multiline: {\n      delimiter:   'semi',\n      requireLast: true,\n    },\n    singleline: {\n      delimiter:   'semi',\n      requireLast: false,\n    },\n    multilineDetection: 'brackets',\n  }],\n\n  // Enforce newlines between operands of ternary expressions\n  // https://eslint.style/rules/default/multiline-ternary\n  'multiline-ternary': ['error', 'always-multiline'],\n\n  // Enforce or disallow parentheses when invoking a constructor with no arguments\n  // https://eslint.style/rules/default/new-parens\n  'new-parens': ['error', 'always'],\n\n  // Require a newline after each call in a method chain\n  // https://eslint.style/rules/default/newline-per-chained-call\n  'newline-per-chained-call': ['error', { ignoreChainWithDepth: 3 }],\n\n  // Disallow arrow functions where they could be confused with comparisons\n  // https://eslint.style/rules/default/no-confusing-arrow\n  'no-confusing-arrow': ['error', { allowParens: true, onlyOneSimpleParam: false }],\n\n  // Disallow unnecessary parentheses\n  // https://eslint.style/rules/default/no-extra-parens\n  'no-extra-parens': 'off',\n\n  // Disallow unnecessary semicolons\n  // https://eslint.style/rules/default/no-extra-semi\n  'no-extra-semi': 'error',\n\n  // Disallow leading or trailing decimal points in numeric literals\n  // https://eslint.style/rules/default/no-floating-decimal\n  'no-floating-decimal': 'error',\n\n  // Disallow mixed binary operators\n  // https://eslint.style/rules/default/no-mixed-operators\n  'no-mixed-operators': ['error', {\n    groups: [\n      ['+', '-', '*', '/', '%', '**'],\n      ['&', '|', '^', '~', '<<', '>>', '>>>'],\n      ['==', '!=', '===', '!=='],\n      ['&&', '||'],\n      ['in', 'instanceof'],\n    ],\n    allowSamePrecedence: false,\n  }],\n\n  // Disallow mixed spaces and tabs for indentation\n  // https://eslint.style/rules/default/no-mixed-spaces-and-tabs\n  'no-mixed-spaces-and-tabs': ['error', 'smart-tabs'],\n\n  // Disallow multiple spaces\n  // https://eslint.style/rules/default/no-multi-spaces\n  'no-multi-spaces': ['error', {\n    ignoreEOLComments: true,\n    exceptions:        {\n      Property:           true,\n      BinaryExpression:   false,\n      VariableDeclarator: false,\n      ImportDeclaration:  false,\n    },\n    includeTabs: true,\n  }],\n\n  // Disallow multiple empty lines\n  // https://eslint.style/rules/default/no-multiple-empty-lines\n  'no-multiple-empty-lines': ['error', { max: 1, maxBOF: 0, maxEOF: 0 }],\n\n  // Disallow all tabs\n  // https://eslint.style/rules/default/no-tabs\n  'no-tabs': 'error',\n\n  // Disallow trailing whitespace at the end of lines\n  // https://eslint.style/rules/default/no-trailing-spaces\n  'no-trailing-spaces': ['error', {\n    skipBlankLines: false,\n    ignoreComments: false,\n  }],\n\n  // Disallow whitespace before properties\n  // https://eslint.style/rules/default/no-whitespace-before-property\n  'no-whitespace-before-property': 'error',\n\n  // Enforce the location of single-line statements\n  // https://eslint.style/rules/default/nonblock-statement-body-position\n  'nonblock-statement-body-position': ['error', 'beside'],\n\n  // Enforce consistent line breaks after opening and before closing braces\n  // https://eslint.style/rules/default/object-curly-newline\n  'object-curly-newline': ['error', {\n    ObjectExpression:  { minProperties: 4, multiline: true, consistent: true },\n    ObjectPattern:     { minProperties: 4, multiline: true, consistent: true },\n    ImportDeclaration: { minProperties: 4, multiline: true, consistent: true },\n    ExportDeclaration: { minProperties: 4, multiline: true, consistent: true },\n  }],\n\n  // Enforce consistent spacing inside braces\n  // https://eslint.style/rules/default/object-curly-spacing\n  'object-curly-spacing': ['error', 'always'],\n\n  // Enforce placing object properties on separate lines\n  // https://eslint.style/rules/default/object-property-newline\n  'object-property-newline': ['error', { allowAllPropertiesOnSameLine: true }],\n\n  // Require or disallow newlines around variable declarations\n  // https://eslint.style/rules/default/one-var-declaration-per-line\n  'one-var-declaration-per-line': ['error', 'always'],\n\n  // Enforce consistent linebreak style for operators\n  // https://eslint.style/rules/default/operator-linebreak\n  'operator-linebreak': ['error', 'before', { overrides: { '=': 'none' } }],\n\n  // Require or disallow padding within blocks\n  // https://eslint.style/rules/default/padded-blocks\n  'padded-blocks': ['error', {\n    blocks:   'never',\n    classes:  'never',\n    switches: 'never',\n  }, {\n    allowSingleLineBlocks: true,\n  }],\n\n  // Require or disallow padding lines between statements\n  // https://eslint.style/rules/default/padding-line-between-statements\n  'padding-line-between-statements': 'off',\n\n  // Require quotes around object literal property names\n  // https://eslint.style/rules/default/quote-props\n  'quote-props': ['error', 'as-needed', { keywords: false, unnecessary: true, numbers: false }],\n\n  // Enforce the consistent use of either backticks, double, or single quotes\n  // https://eslint.style/rules/default/quotes\n  quotes: ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],\n\n  // Enforce spacing between rest and spread operators and their expressions\n  // https://eslint.style/rules/default/rest-spread-spacing\n  'rest-spread-spacing': ['error', 'never'],\n\n  // Require or disallow semicolons instead of ASI\n  // https://eslint.style/rules/default/semi\n  semi: ['error', 'always', { omitLastInOneLineBlock: false, omitLastInOneLineClassBody: false }],\n\n  // Enforce consistent spacing before and after semicolons\n  // https://eslint.style/rules/default/semi-spacing\n  'semi-spacing': ['error', { before: false, after: true }],\n\n  // Enforce location of semicolons\n  // https://eslint.style/rules/default/semi-style\n  'semi-style': ['error', 'last'],\n\n  // Enforce consistent spacing before blocks\n  // https://eslint.style/rules/default/space-before-blocks\n  'space-before-blocks': ['error', 'always'],\n\n  // Enforce consistent spacing before `function` definition opening parenthesis\n  // https://eslint.style/rules/default/space-before-function-paren\n  'space-before-function-paren': ['error', {\n    anonymous:  'always',\n    named:      'never',\n    asyncArrow: 'always',\n  }],\n\n  // Enforce consistent spacing inside parentheses\n  // https://eslint.style/rules/default/space-in-parens\n  'space-in-parens': ['error', 'never'],\n\n  // Require spacing around infix operators\n  // https://eslint.style/rules/default/space-infix-ops\n  'space-infix-ops': ['error', { int32Hint: false }],\n\n  // Enforce consistent spacing before or after unary operators\n  // https://eslint.style/rules/default/space-unary-ops\n  'space-unary-ops': ['error', {\n    words:    true,\n    nonwords: false,\n  }],\n\n  // Enforce consistent spacing after the `//` or `/*` in a comment\n  // https://eslint.style/rules/default/spaced-comment\n  'spaced-comment': ['error', 'always', {\n    line: {\n      exceptions: ['-', '+'],\n      markers:    ['=', '!', '/'],\n    },\n    block: {\n      exceptions: ['-', '+'],\n      markers:    ['=', '!', ':', '::'],\n      balanced:   true,\n    },\n  }],\n\n  // Enforce spacing around colons of switch statements\n  // https://eslint.style/rules/default/switch-colon-spacing\n  'switch-colon-spacing': ['error', { after: true, before: false }],\n\n  // Require or disallow spacing around embedded expressions of template strings\n  // https://eslint.style/rules/default/template-curly-spacing\n  'template-curly-spacing': ['error', 'never'],\n\n  // Require or disallow spacing between template tags and their literals\n  // https://eslint.style/rules/default/template-tag-spacing\n  'template-tag-spacing': ['error', 'never'],\n\n  // Require consistent spacing around type annotations\n  // https://eslint.style/rules/default/type-annotation-spacing\n  'type-annotation-spacing': ['error', { before: false, after: true }],\n\n  // type-generic-spacing Enforces consistent spacing inside TypeScript type generics\n  // https://eslint.style/rules/default/type-generic-spacing\n  'type-generic-spacing': 'error',\n\n  // type-named-tuple-spacing Expect space before the type declaration in the named tuple\n  // https://eslint.style/rules/default/type-named-tuple-spacing\n  'type-named-tuple-spacing': 'error',\n\n  // Require parentheses around immediate `function` invocations\n  // https://eslint.style/rules/default/wrap-iife\n  'wrap-iife': ['error', 'inside', { functionPrototypeMethods: true }],\n\n  // Require parenthesis around regex literals\n  // https://eslint.style/rules/default/wrap-regex\n  'wrap-regex': 'error',\n\n  // Require or disallow spacing around the `*` in `yield*` expressions\n  // https://eslint.style/rules/default/yield-star-spacing\n  'yield-star-spacing': ['error', 'after'],\n};\n\nfunction getRules(pluginName: string): Record<string, unknown> {\n  return addPluginName(pluginName, rules);\n}\n\nexport default {\n  getRules,\n};\n","import stylistic from '@stylistic/eslint-plugin';\nimport rules from './rules.js';\n\nexport default {\n  plugins: {\n    '@stylistic': stylistic,\n  },\n  rules: rules.getRules('@stylistic'),\n};\n","export default {\n  // apply jsonc rules similar to your configured ESLint core rules\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/auto.html\n  auto: 'error',\n\n  // enforce naming convention to property key names\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-name-casing.html\n  'key-name-casing': 'off',\n\n  // disallow BigInt literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-bigint-literals.html\n  'no-bigint-literals': 'error',\n\n  // disallow binary expression\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-expression.html\n  'no-binary-expression': 'error',\n\n  // disallow binary numeric literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-binary-numeric-literals.html\n  'no-binary-numeric-literals': 'error',\n\n  // disallow comments\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-comments.html\n  'no-comments': 'off',\n\n  // disallow escape sequences in identifiers.\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-escape-sequence-in-identifier.html\n  'no-escape-sequence-in-identifier': 'error',\n\n  // disallow hexadecimal numeric literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-hexadecimal-numeric-literals.html\n  'no-hexadecimal-numeric-literals': 'error',\n\n  // disallow Infinity\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-infinity.html\n  'no-infinity': 'error',\n\n  // disallow NaN\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-nan.html\n  'no-nan': 'error',\n\n  // disallow number property keys\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-number-props.html\n  'no-number-props': 'error',\n\n  // disallow numeric separators\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-numeric-separators.html\n  'no-numeric-separators': 'error',\n\n  // disallow octal numeric literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-numeric-literals.html\n  'no-octal-numeric-literals': 'error',\n\n  // disallow parentheses around the expression\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-parenthesized.html\n  'no-parenthesized': 'error',\n\n  // disallow plus sign\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-plus-sign.html\n  'no-plus-sign': 'error',\n\n  // disallow RegExp literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-regexp-literals.html\n  'no-regexp-literals': 'error',\n\n  // disallow template literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-template-literals.html\n  'no-template-literals': 'error',\n\n  // disallow undefined\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-undefined-value.html\n  'no-undefined-value': 'error',\n\n  // disallow Unicode code point escape sequences.\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-unicode-codepoint-escapes.html\n  'no-unicode-codepoint-escapes': 'error',\n\n  // require array values to be sorted\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-array-values.html\n  'sort-array-values': 'off',\n\n  // require object keys to be sorted\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/sort-keys.html\n  'sort-keys': 'off',\n\n  // disallow invalid number for JSON\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/valid-json-number.html\n  'valid-json-number': 'error',\n\n  // disallow parsing errors in Vue custom blocks\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/vue-custom-block/no-parsing-error.html\n  'vue-custom-block/no-parsing-error': 'error',\n};\n","export default {\n  // enforce line breaks after opening and before closing array brackets\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-newline.html\n  'array-bracket-newline': ['error',\n                            {\n                              multiline: true,\n                              minItems:  null,\n                            }],\n\n  // disallow or enforce spaces inside of brackets\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-bracket-spacing.html\n  'array-bracket-spacing': ['error', 'never'],\n\n  // enforce line breaks between array elements\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/array-element-newline.html\n  'array-element-newline': ['error', 'consistent'],\n\n  // require or disallow trailing commas\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-dangle.html\n  'comma-dangle': ['error', 'never'],\n\n  // enforce consistent comma style\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/comma-style.html\n  'comma-style': ['error', 'last'],\n\n  // enforce consistent indentation\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/indent.html\n  indent: ['error', 2],\n\n  // enforce consistent spacing between keys and values in object literal properties\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/key-spacing.html\n  'key-spacing': ['error', {\n    beforeColon: false,\n    afterColon:  true,\n    mode:        'strict',\n  }],\n\n  // disallow duplicate keys in object literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-dupe-keys.html\n  'no-dupe-keys': 'error',\n\n  // disallow leading or trailing decimal points in numeric literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-floating-decimal.html\n  'no-floating-decimal': 'error',\n\n  // disallow irregular whitespace\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-irregular-whitespace.html\n  'no-irregular-whitespace': 'error',\n\n  // disallow multiline strings\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-multi-str.html\n  'no-multi-str': 'error',\n\n  // disallow octal escape sequences in string literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal-escape.html\n  'no-octal-escape': 'error',\n\n  // disallow legacy octal literals\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-octal.html\n  'no-octal': 'error',\n\n  // disallow sparse arrays\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-sparse-arrays.html\n  'no-sparse-arrays': 'error',\n\n  // disallow unnecessary escape usage\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/no-useless-escape.html\n  'no-useless-escape': 'error',\n\n  // enforce consistent line breaks inside braces\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-newline.html\n  'object-curly-newline': ['error',\n                           {\n                             consistent: true,\n                           }],\n\n  // enforce consistent spacing inside braces\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-curly-spacing.html\n  'object-curly-spacing': ['error', 'always'],\n\n  // enforce placing object properties on separate lines\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/object-property-newline.html\n  'object-property-newline': ['error', { allowAllPropertiesOnSameLine: true }],\n\n  // require quotes around object literal property names\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quote-props.html\n  'quote-props': ['error', 'always'],\n\n  // enforce use of double or single quotes\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/quotes.html\n  quotes: ['error', 'double', { avoidEscape: false }],\n\n  // disallow spaces after unary operators\n  // https://ota-meshi.github.io/eslint-plugin-jsonc/rules/space-unary-ops.html\n  'space-unary-ops': 'error',\n};\n","import jsonc from './jsonc.js';\nimport extension from './extension.js';\nimport { addPluginName } from '../../../util/ruleTools.js';\n\nconst ruleGroups = [jsonc, extension];\n\nfunction getRules(pluginName: string): Record<string, unknown> {\n  return addPluginName(pluginName, ruleGroups);\n}\n\nexport default { getRules };\n","import jsoncParser from 'jsonc-eslint-parser';\nimport jsonc from 'eslint-plugin-jsonc';\nimport rules from './rules/index.js';\n\nexport default {\n  languageOptions: {\n    parser: jsoncParser,\n  },\n  plugins: {\n    jsonc,\n  },\n  rules: rules.getRules('jsonc'),\n};\n","import buildIn from './buildIn/index.js';\nimport ts from './ts/index.js';\nimport stylistic from './stylistic/index.js';\nimport json from './json/index.js';\n\nexport default {\n  buildIn,\n  ts,\n  stylistic,\n  json,\n};\n","// @see https://stylelint.io/user-guide/rules#avoid-errors\n\nexport default {\n  // #region Descending\n\n  // Disallow selectors of lower specificity from coming after overriding selectors of higher specificity.\n  // https://stylelint.io/user-guide/rules/no-descending-specificity/\n  'no-descending-specificity': true,\n\n  // #endregion\n\n  // #region Duplicate\n\n  // Disallow duplicate custom properties within declaration blocks.\n  // https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-custom-properties/\n  'declaration-block-no-duplicate-custom-properties': true,\n\n  // Disallow duplicate properties within declaration blocks.\n  // https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-properties/\n  'declaration-block-no-duplicate-properties': true,\n\n  // Disallow duplicate names within font families.\n  // https://stylelint.io/user-guide/rules/font-family-no-duplicate-names/\n  'font-family-no-duplicate-names': true,\n\n  // Disallow duplicate selectors within keyframe blocks.\n  // https://stylelint.io/user-guide/rules/keyframe-block-no-duplicate-selectors/\n  'keyframe-block-no-duplicate-selectors': true,\n\n  // no-duplicate-at-import-rules\n  // https://stylelint.io/user-guide/rules/no-duplicate-at-import-rules/\n  'no-duplicate-at-import-rules': true,\n\n  // Disallow duplicate selectors.\n  // https://stylelint.io/user-guide/rules/no-duplicate-selectors/\n  'no-duplicate-selectors': [true, { disallowInList: false }],\n\n  // #endregion\n\n  // #region Empty\n\n  // Disallow empty blocks.\n  // https://stylelint.io/user-guide/rules/block-no-empty/\n  'block-no-empty': true,\n\n  // Disallow empty comments.\n  // https://stylelint.io/user-guide/rules/comment-no-empty/\n  'comment-no-empty': true,\n\n  // Disallow empty sources.\n  // https://stylelint.io/user-guide/rules/no-empty-source/\n  'no-empty-source': true,\n\n  // #endregion\n\n  // #region Invalid\n\n  // Disallow invalid hex colors.\n  // https://stylelint.io/user-guide/rules/color-no-invalid-hex/\n  'color-no-invalid-hex': true,\n\n  // Disallow invalid unspaced operator within calc functions.\n  // https://stylelint.io/user-guide/rules/function-calc-no-unspaced-operator/\n  'function-calc-no-unspaced-operator': true,\n\n  // Disallow invalid !important within keyframe declarations.\n  // https://stylelint.io/user-guide/rules/keyframe-declaration-no-important/\n  'keyframe-declaration-no-important': true,\n\n  // Disallow invalid media queries.\n  // https://stylelint.io/user-guide/rules/media-query-no-invalid/\n  'media-query-no-invalid': true,\n\n  // Disallow invalid named grid areas.\n  // https://stylelint.io/user-guide/rules/named-grid-areas-no-invalid/\n  'named-grid-areas-no-invalid': true,\n\n  // Disallow invalid double-slash comments.\n  // https://stylelint.io/user-guide/rules/no-invalid-double-slash-comments/\n  'no-invalid-double-slash-comments': true,\n\n  // Disallow invalid position @import rules.\n  // https://stylelint.io/user-guide/rules/no-invalid-position-at-import-rule/\n  'no-invalid-position-at-import-rule': true,\n\n  // Disallow invalid newlines within strings.\n  // https://stylelint.io/user-guide/rules/string-no-newline/\n  'string-no-newline': true,\n\n  // #endregion\n\n  // #region Irregular\n\n  // Disallow irregular whitespaces.\n  // https://stylelint.io/user-guide/rules/no-irregular-whitespace/\n  'no-irregular-whitespace': true,\n\n  // #endregion\n\n  // #region Missing\n\n  // Disallow missing var function for custom properties.\n  // https://stylelint.io/user-guide/rules/custom-property-no-missing-var-function/\n  'custom-property-no-missing-var-function': true,\n\n  // Disallow a missing generic family keyword within font families.\n  // https://stylelint.io/user-guide/rules/font-family-no-missing-generic-family-keyword/\n  'font-family-no-missing-generic-family-keyword': true,\n\n  // #endregion\n\n  // #region Non-standard\n\n  // Disallow non-standard direction values for linear gradient functions.\n  // https://stylelint.io/user-guide/rules/function-linear-gradient-no-nonstandard-direction/\n  'function-linear-gradient-no-nonstandard-direction': true,\n\n  // #endregion\n\n  // #region Overrides\n\n  // Disallow shorthand properties that override related longhand properties.\n  // https://stylelint.io/user-guide/rules/declaration-block-no-shorthand-property-overrides/\n  'declaration-block-no-shorthand-property-overrides': true,\n\n  // #endregion\n\n  // #region Unmatchable\n\n  // Disallow unmatchable An+B selectors.\n  // https://stylelint.io/user-guide/rules/selector-anb-no-unmatchable/\n  'selector-anb-no-unmatchable': true,\n\n  // #endregion\n\n  // #region Unknown\n\n  // Disallow unknown annotations.\n  // https://stylelint.io/user-guide/rules/annotation-no-unknown/\n  'annotation-no-unknown': true,\n\n  // Disallow unknown at-rules.\n  // https://stylelint.io/user-guide/rules/at-rule-no-unknown/\n  'at-rule-no-unknown': true,\n\n  // Disallow unknown values for properties within declarations.\n  // https://stylelint.io/user-guide/rules/declaration-property-value-no-unknown/\n  'declaration-property-value-no-unknown': true,\n\n  // Disallow unknown functions.\n  // https://stylelint.io/user-guide/rules/function-no-unknown/\n  'function-no-unknown': true,\n\n  // Disallow unknown media feature names.\n  // https://stylelint.io/user-guide/rules/media-feature-name-no-unknown/\n  'media-feature-name-no-unknown': true,\n\n  // Disallow unknown values for media features.\n  // https://stylelint.io/user-guide/rules/media-feature-name-value-no-unknown/\n  'media-feature-name-value-no-unknown': true,\n\n  // Disallow unknown animations.\n  // https://stylelint.io/user-guide/rules/no-unknown-animations/\n  'no-unknown-animations': true,\n\n  // Disallow unknown custom properties.\n  // https://stylelint.io/user-guide/rules/no-unknown-custom-properties/\n  'no-unknown-custom-properties': true,\n\n  // Disallow unknown properties.\n  // https://stylelint.io/user-guide/rules/property-no-unknown/\n  'property-no-unknown': true,\n\n  // Disallow unknown pseudo-class selectors.\n  // https://stylelint.io/user-guide/rules/selector-pseudo-class-no-unknown/\n  'selector-pseudo-class-no-unknown': true,\n\n  // Disallow unknown pseudo-element selectors.\n  // https://stylelint.io/user-guide/rules/selector-pseudo-element-no-unknown/\n  'selector-pseudo-element-no-unknown': true,\n\n  // Disallow unknown type selectors.\n  // https://stylelint.io/user-guide/rules/selector-type-no-unknown/\n  'selector-type-no-unknown': true,\n\n  // Disallow unknown units.\n  // https://stylelint.io/user-guide/rules/unit-no-unknown/\n  'unit-no-unknown': true,\n\n  // #endregion\n};\n","// @see https://stylelint.io/user-guide/rules#enforce-conventions\n\nexport default {\n  // #region Allowed, disallowed & required\n\n  // Specify a list of allowed at-rules.\n  // https://stylelint.io/user-guide/rules#enforce-conventions\n  // 'at-rule-allowed-list': null,\n\n  // Specify a list of disallowed at-rules.\n  // https://stylelint.io/user-guide/rules/at-rule-disallowed-list/\n  // 'at-rule-disallowed-list': null,\n\n  // Disallow vendor prefixes for at-rules.\n  // https://stylelint.io/user-guide/rules/at-rule-no-vendor-prefix/\n  'at-rule-no-vendor-prefix': true,\n\n  // Specify a list of required properties for an at-rule.\n  // https://stylelint.io/user-guide/rules/at-rule-property-required-list/\n  // 'at-rule-property-required-list': null,\n\n  // Require or disallow alpha channel for hex colors.\n  // https://stylelint.io/user-guide/rules/color-hex-alpha/\n  // 'color-hex-alpha': null,\n\n  // Require (where possible) or disallow named colors.\n  // https://stylelint.io/user-guide/rules/color-named/\n  'color-named': ['never'],\n\n  // Disallow hex colors.\n  // https://stylelint.io/user-guide/rules/color-no-hex/\n  // 'color-no-hex': null,\n\n  // Specify a list of disallowed words within comments.\n  // https://stylelint.io/user-guide/rules/comment-word-disallowed-list/\n  // 'comment-word-disallowed-list': null,\n\n  // Disallow !important within declarations.\n  // https://stylelint.io/user-guide/rules/declaration-no-important/\n  'declaration-no-important': true,\n\n  // Specify a list of allowed property and unit pairs within declarations.\n  // https://stylelint.io/user-guide/rules/declaration-property-unit-allowed-list/\n  // 'declaration-property-unit-allowed-list': null,\n\n  // Specify a list of disallowed property and unit pairs within declarations.\n  // https://stylelint.io/user-guide/rules/declaration-property-unit-disallowed-list/\n  // 'declaration-property-unit-disallowed-list': null,\n\n  // Specify a list of allowed property and value pairs within declarations.\n  // https://stylelint.io/user-guide/rules/declaration-property-value-allowed-list/\n  // 'declaration-property-value-allowed-list': null,\n\n  // Specify a list of disallowed property and value pairs within declarations.\n  // https://stylelint.io/user-guide/rules/declaration-property-value-disallowed-list/\n  // 'declaration-property-value-disallowed-list': null,\n\n  // Specify a list of allowed functions.\n  // https://stylelint.io/user-guide/rules/function-allowed-list/\n  // 'function-allowed-list': null,\n\n  // Specify a list of disallowed functions.\n  // https://stylelint.io/user-guide/rules/function-disallowed-list/\n  // 'function-disallowed-list': null,\n\n  // Disallow scheme-relative urls.\n  // https://stylelint.io/user-guide/rules/function-url-no-scheme-relative/\n  'function-url-no-scheme-relative': true,\n\n  // Specify a list of allowed URL schemes.\n  // https://stylelint.io/user-guide/rules/function-url-scheme-allowed-list/\n  // 'function-url-scheme-allowed-list': null,\n\n  // Specify a list of disallowed URL schemes.\n  // https://stylelint.io/user-guide/rules/function-url-scheme-disallowed-list/\n  // 'function-url-scheme-disallowed-list': null,\n\n  // Disallow units for zero lengths.\n  // https://stylelint.io/user-guide/rules/length-zero-no-unit/\n  'length-zero-no-unit': true,\n\n  // Specify a list of allowed media feature names.\n  // https://stylelint.io/user-guide/rules/media-feature-name-allowed-list/\n  // 'media-feature-name-allowed-list': null,\n\n  // Specify a list of disallowed media feature names.\n  // https://stylelint.io/user-guide/rules/media-feature-name-disallowed-list/\n  // 'media-feature-name-disallowed-list': null,\n\n  // Disallow vendor prefixes for media feature names.\n  // https://stylelint.io/user-guide/rules/media-feature-name-no-vendor-prefix/\n  'media-feature-name-no-vendor-prefix': true,\n\n  // Specify a list of allowed name and unit pairs within media features.\n  // https://stylelint.io/user-guide/rules/media-feature-name-unit-allowed-list/\n  // 'media-feature-name-unit-allowed-list': null,\n\n  // Specify a list of allowed media feature name and value pairs.\n  // https://stylelint.io/user-guide/rules/media-feature-name-value-allowed-list/\n  // 'media-feature-name-value-allowed-list': null,\n\n  // Specify a list of allowed properties.\n  // https://stylelint.io/user-guide/rules/property-allowed-list/\n  // 'property-allowed-list': null,\n\n  // Specify a list of disallowed properties.\n  // https://stylelint.io/user-guide/rules/property-disallowed-list/\n  // 'property-disallowed-list': null,\n\n  // Disallow vendor prefixes for properties.\n  // https://stylelint.io/user-guide/rules/property-no-vendor-prefix/\n  'property-no-vendor-prefix': true,\n\n  // Specify a list of disallowed properties for selectors within rules.\n  // https://stylelint.io/user-guide/rules/rule-selector-property-disallowed-list/\n  // 'rule-selector-property-disallowed-list': null,\n\n  // Specify a list of disallowed attribute names.\n  // https://stylelint.io/user-guide/rules/selector-attribute-name-disallowed-list/\n  // 'selector-attribute-name-disallowed-list': null,\n\n  // Specify a list of allowed attribute operators.\n  // https://stylelint.io/user-guide/rules/selector-attribute-operator-allowed-list/\n  // 'selector-attribute-operator-allowed-list': null,\n\n  // Specify a list of disallowed attribute operators.\n  // https://stylelint.io/user-guide/rules/selector-attribute-operator-disallowed-list/\n  // 'selector-attribute-operator-disallowed-list': null,\n\n  // Specify a list of allowed combinators.\n  // https://stylelint.io/user-guide/rules/selector-combinator-allowed-list/\n  // 'selector-combinator-allowed-list': null,\n\n  // Specify a list of disallowed combinators.\n  // https://stylelint.io/user-guide/rules/selector-combinator-disallowed-list/\n  // 'selector-combinator-disallowed-list': null,\n\n  // Specify a list of disallowed selectors.\n  // https://stylelint.io/user-guide/rules/selector-disallowed-list/\n  // 'selector-disallowed-list': null,\n\n  // Disallow qualifying a selector by type.\n  // https://stylelint.io/user-guide/rules/selector-no-qualifying-type/\n  // 'selector-no-qualifying-type': null,\n\n  // Disallow vendor prefixes for selectors.\n  // https://stylelint.io/user-guide/rules/selector-no-vendor-prefix/\n  // 'selector-no-vendor-prefix': true,\n\n  // Specify a list of allowed pseudo-class selectors.\n  // https://stylelint.io/user-guide/rules/selector-pseudo-class-allowed-list/\n  // 'selector-pseudo-class-allowed-list': null,\n\n  // Specify a list of disallowed pseudo-class selectors.\n  // https://stylelint.io/user-guide/rules/selector-pseudo-class-disallowed-list/\n  // 'selector-pseudo-class-disallowed-list': null,\n\n  // Specify a list of allowed pseudo-element selectors.\n  // https://stylelint.io/user-guide/rules/selector-pseudo-element-allowed-list/\n  // 'selector-pseudo-element-allowed-list': null,\n\n  // Specify a list of disallowed pseudo-element selectors.\n  // https://stylelint.io/user-guide/rules/selector-pseudo-element-disallowed-list/\n  // 'selector-pseudo-element-disallowed-list': null,\n\n  // Specify a list of allowed units.\n  // https://stylelint.io/user-guide/rules/unit-allowed-list/\n  // 'unit-allowed-list': null,\n\n  // Specify a list of disallowed units.\n  // https://stylelint.io/user-guide/rules/unit-disallowed-list/\n  // 'unit-disallowed-list': null,\n\n  // Disallow vendor prefixes for values.\n  // https://stylelint.io/user-guide/rules/value-no-vendor-prefix/\n  // 'value-no-vendor-prefix': true,\n\n  // #endregion\n\n  // #region Case\n\n  // Specify lowercase or uppercase for function names.\n  // https://stylelint.io/user-guide/rules/function-name-case/\n  'function-name-case': 'lower',\n\n  // Specify lowercase or uppercase for type selectors.\n  // https://stylelint.io/user-guide/rules/selector-type-case/\n  'selector-type-case': 'lower',\n\n  // Specify lowercase or uppercase for keywords values.\n  // https://stylelint.io/user-guide/rules/value-keyword-case/\n  'value-keyword-case': ['lower', {\n    camelCaseSvgKeywords: true,\n  }],\n\n  // #endregion\n\n  // #region Empty lines\n\n  // Require or disallow an empty line before at-rules.\n  // https://stylelint.io/user-guide/rules/at-rule-empty-line-before/\n  'at-rule-empty-line-before': ['always', {\n    except: ['after-same-name', 'blockless-after-same-name-blockless', 'blockless-after-blockless'],\n    ignore: ['after-comment', 'first-nested', 'inside-block'],\n  }],\n\n  // Require or disallow an empty line before comments.\n  // https://stylelint.io/user-guide/rules/comment-empty-line-before/#except-first-nested\n  // 'comment-empty-line-before': null,\n\n  // Require or disallow an empty line before custom properties.\n  // https://stylelint.io/user-guide/rules/custom-property-empty-line-before/\n  // 'custom-property-empty-line-before': null,\n\n  // Require or disallow an empty line before declarations.\n  // https://stylelint.io/user-guide/rules/declaration-empty-line-before/\n  // 'declaration-empty-line-before': null,\n\n  // Require or disallow an empty line before rules.\n  // https://stylelint.io/user-guide/rules/rule-empty-line-before/\n  // 'rule-empty-line-before': null,\n\n  // #endregion\n\n  // #region Max & min\n\n  // Limit the number of declarations within a single-line declaration block.\n  // https://stylelint.io/user-guide/rules/declaration-block-single-line-max-declarations/\n  'declaration-block-single-line-max-declarations': 1,\n\n  // Limit the number of values for a list of properties within declarations.\n  // https://stylelint.io/user-guide/rules/declaration-property-max-values/\n  // 'declaration-property-max-values': null,\n\n  // Limit the depth of nesting.\n  // https://stylelint.io/user-guide/rules/max-nesting-depth/\n  // 'max-nesting-depth': null,\n\n  // Limit the number of decimal places allowed in numbers.\n  // https://stylelint.io/user-guide/rules/number-max-precision/#insidefunctions-regex-int-regex-int-string-int\n  // 'number-max-precision': 3,\n\n  // Limit the number of attribute selectors in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-attribute/\n  // 'selector-max-attribute': null,\n\n  // Limit the number of classes in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-class/\n  // 'selector-max-class': null,\n\n  // Limit the number of combinators in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-combinators/\n  // 'selector-max-combinators': null,\n\n  // Limit the number of compound selectors in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-compound-selectors/\n  // 'selector-max-compound-selectors': null,\n\n  // Limit the number of ID selectors in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-id/\n  // 'selector-max-id': null,\n\n  // Limit the number of pseudo-classes in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-pseudo-class/\n  // 'selector-max-pseudo-class': null,\n\n  // Limit the specificity of selectors.\n  // https://stylelint.io/user-guide/rules/selector-max-specificity/\n  // 'selector-max-specificity': null,\n\n  // Limit the number of type selectors in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-type/\n  // 'selector-max-type': null,\n\n  // Limit the number of universal selectors in a selector.\n  // https://stylelint.io/user-guide/rules/selector-max-universal/\n  // 'selector-max-universal': null,\n\n  // Limit the minimum number of milliseconds for time values.\n  // https://stylelint.io/user-guide/rules/time-min-milliseconds/\n  // 'time-min-milliseconds': null,\n\n  // #endregion\n\n  // #region Notation\n\n  // Specify percentage or number notation for alpha-values.\n  // https://stylelint.io/user-guide/rules/alpha-value-notation/\n  'alpha-value-notation': 'number',\n\n  // Specify modern or legacy notation for color-functions.\n  // https://stylelint.io/user-guide/rules/color-function-notation/\n  // 'color-function-notation': null,\n\n  // Specify short or long notation for hex colors.\n  // https://stylelint.io/user-guide/rules/color-hex-length/\n  'color-hex-length': 'short',\n\n  // Require numeric or named (where possible) font-weight values.\n  // https://stylelint.io/user-guide/rules/font-weight-notation/\n  'font-weight-notation': 'numeric',\n\n  // Specify number or angle notation for degree hues.\n  // https://stylelint.io/user-guide/rules/hue-degree-notation/\n  'hue-degree-notation': 'angle',\n\n  // Specify string or URL notation for @import rules.\n  // https://stylelint.io/user-guide/rules/import-notation/\n  'import-notation': 'string',\n\n  // Specify keyword or percentage notation for keyframe selectors.\n  // https://stylelint.io/user-guide/rules/keyframe-selector-notation/\n  'keyframe-selector-notation': 'percentage-unless-within-keyword-only-block',\n\n  // Specify number or percentage notation for lightness.\n  // https://stylelint.io/user-guide/rules/lightness-notation/\n  'lightness-notation': 'number',\n\n  // Specify context or prefix notation for media feature ranges.\n  // https://stylelint.io/user-guide/rules/media-feature-range-notation/\n  'media-feature-range-notation': 'context',\n\n  // Specify simple or complex notation for :not() pseudo-class selectors.\n  // https://stylelint.io/user-guide/rules/selector-not-notation/\n  'selector-not-notation': 'complex',\n\n  // Specify single or double colon notation for applicable pseudo-element selectors.\n  // https://stylelint.io/user-guide/rules/selector-pseudo-element-colon-notation/\n  'selector-pseudo-element-colon-notation': 'single',\n  // #endregion\n\n  // #region Pattern\n\n  // Specify a pattern for comments.\n  // https://stylelint.io/user-guide/rules/comment-pattern/\n  'comment-pattern': null,\n\n  // Specify a pattern for custom media query names.\n  // https://stylelint.io/user-guide/rules/custom-media-pattern/\n  'custom-media-pattern': null,\n\n  // custom-property-pattern\n  // https://stylelint.io/user-guide/rules/custom-property-pattern/\n  'custom-property-pattern': null,\n\n  // Specify a pattern for keyframe names.\n  // https://stylelint.io/user-guide/rules/keyframes-name-pattern/\n  'keyframes-name-pattern': null,\n\n  // Specify a pattern for class selectors.\n  // https://stylelint.io/user-guide/rules/selector-class-pattern/\n  'selector-class-pattern': null,\n\n  // Specify a pattern for ID selectors.\n  // https://stylelint.io/user-guide/rules/selector-id-pattern/\n  'selector-id-pattern': null,\n\n  // Specify a pattern for the selectors of rules nested within rules.\n  // https://stylelint.io/user-guide/rules/selector-nested-pattern/\n  'selector-nested-pattern': null,\n  // #endregion\n\n  // #region Quotes\n\n  // Require or disallow quotes for font family names.\n  // https://stylelint.io/user-guide/rules/font-family-name-quotes/#always-where-required\n  // 'font-family-name-quotes': null,\n\n  // Require or disallow quotes for urls.\n  // https://stylelint.io/user-guide/rules/function-url-quotes/\n  'function-url-quotes': 'never',\n\n  // Require or disallow quotes for attribute values.\n  // https://stylelint.io/user-guide/rules/selector-attribute-quotes/\n  'selector-attribute-quotes': 'always',\n\n  // #endregion\n\n  // #region Redundant\n\n  // Disallow redundant longhand properties within declaration-block.\n  // https://stylelint.io/user-guide/rules/declaration-block-no-redundant-longhand-properties/#true\n  // 'declaration-block-no-redundant-longhand-properties': null,\n\n  // Disallow redundant values within shorthand properties.\n  // https://stylelint.io/user-guide/rules/shorthand-property-no-redundant-values/\n  // 'shorthand-property-no-redundant-values': null,\n\n  // #endregion\n\n  // #region Whitespace inside\n\n  // Require or disallow whitespace on the inside of comment markers.\n  // https://stylelint.io/user-guide/rules/comment-whitespace-inside/\n  // 'comment-whitespace-inside': 'always',\n\n  // #endregion\n};\n","import avoidErrors from './avoidErrors.js';\nimport enforceConventions from './enforceConventions.js';\n\nexport default {\n  ...avoidErrors,\n  ...enforceConventions,\n};\n","import rules from './rules/index.js';\n\nexport default {\n  plugins:                       [],\n  defaultSeverity:               'error',\n  reportDescriptionlessDisables: true,\n  reportInvalidScopeDisables:    [true, { severity: 'warning' }],\n  reportNeedlessDisables:        [true, { severity: 'warning' }],\n  ignoreDisables:                false,\n  rules,\n};\n","export default {\n  extends: ['stylelint-config-clean-order/error'],\n};\n","export default {\n  plugins: ['stylelint-prettier'],\n  rules:   {\n    'prettier/prettier': true,\n  },\n};\n","import buildIn from './buildIn/index.js';\nimport order from './order/index.js';\nimport prettier from './prettier/index.js';\n\nexport default {\n  buildIn,\n  order,\n  prettier,\n};\n","import eslint from './eslint/index.js';\nimport stylelint from './stylelint/index.js';\n\nexport default {\n  eslint,\n  stylelint,\n};\n"],"names":["rules","ruleGroups","stylistic","getRules","jsonc","buildIn","ts"],"mappings":"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"}